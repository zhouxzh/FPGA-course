import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as n}from"./app-K29S6iA3.js";const t={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="实验6-ps端mio的使用" tabindex="-1"><a class="header-anchor" href="#实验6-ps端mio的使用"><span>实验6；PS端MIO的使用</span></a></h1><hr><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span><strong>概述</strong></span></a></h4><ul><li><strong>实验工程</strong>：Vivado工程名为“ps_mio”（注：AX7Z020/AX7Z010开发板无此工程）。</li><li><strong>实验目的</strong>：通过MIO控制PS端外设（如LED、按键），掌握MIO与EMIO的基础操作及中断配置。</li></ul><hr><h4 id="mio与gpio结构" tabindex="-1"><a class="header-anchor" href="#mio与gpio结构"><span><strong>MIO与GPIO结构</strong></span></a></h4><ol><li><p><strong>MIO特性</strong>：</p><ul><li>共54个引脚，分两个BANK： <ul><li>BANK0：16引脚</li><li>BANK1：38引脚</li></ul></li><li><strong>电压选择</strong>：需根据外设电压要求配置BANK0/BANK1电压。</li><li>支持外设：SPI、I2C、UART、GPIO等，可通过Vivado配置信号导出至MIO或通过EMIO连接至PL端。</li></ul></li><li><p><strong>GPIO BANK分布</strong>（UG585文档）：</p><ul><li><strong>BANK0</strong>：32信号（对应MIO的0-31）</li><li><strong>BANK1</strong>：22信号（对应MIO的32-53）</li><li><strong>BANK2/BANK3</strong>：64个PL端引脚（每组含输入、输出、使能信号，共192个信号）。</li></ul></li></ol><hr><h4 id="实验环境与配置" tabindex="-1"><a class="header-anchor" href="#实验环境与配置"><span><strong>实验环境与配置</strong></span></a></h4><ul><li><strong>基础工程</strong>：基于“ps_hello”工程修改。</li><li><strong>硬件连接</strong>： <ul><li>AX7020/AX7010开发板的LED连接至PS端MIO0（AX7020）和MIO13（AX7010）。</li><li>按键通过MIO输入触发中断。</li></ul></li></ul><hr><h4 id="实验步骤-mio控制led闪烁" tabindex="-1"><a class="header-anchor" href="#实验步骤-mio控制led闪烁"><span><strong>实验步骤：MIO控制LED闪烁</strong></span></a></h4><ol><li><p><strong>Vivado配置</strong>：</p><ul><li>打开GPIO MIO功能，配置引脚为输出模式。</li><li>生成比特流并导出至SDK。</li></ul></li><li><p><strong>SDK开发</strong>：</p><ul><li>导入Xilinx示例工程（<code>ps7_gpio_0</code>）。</li><li>代码流程：<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">GPIO初始化 → 设置LED方向 → 循环控制LED电平翻转</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol><hr><h4 id="按键中断实现" tabindex="-1"><a class="header-anchor" href="#按键中断实现"><span><strong>按键中断实现</strong></span></a></h4><ol><li><p><strong>中断寄存器配置</strong>（关键寄存器）：</p><ul><li><strong>INT_TYPE</strong>：中断类型（电平/边沿敏感）</li><li><strong>INT_POLARITY</strong>：极性（低电平/下降沿 或 高电平/上升沿）</li><li><strong>INT_ANY</strong>：边沿触发方式（需INT_TYPE设为边沿敏感）。</li><li><strong>操作流程</strong>：<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">初始化GPIO → 设置按键输入</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LED输出方向 → 配置中断类型（上升沿触发） → 使能中断</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>中断服务程序设计</strong>：</p><ul><li><strong>主函数</strong>：设置中断优先级（操作<code>ICDIPR</code>/<code>ICDICFR</code>寄存器）。</li><li><strong>中断服务函数</strong>：<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">判断中断状态 → 清除中断标志 → 翻转LED状态（按键按下时触发）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol><hr><h4 id="关键代码逻辑" tabindex="-1"><a class="header-anchor" href="#关键代码逻辑"><span><strong>关键代码逻辑</strong></span></a></h4><ol><li><p><strong>初始化与中断配置</strong>：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IntrInitFunctions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 初始化中断控制器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XScuGic_SetPriorityTriggerType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">IntcInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> GPIO_INTR_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">A0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 设置优先级与触发方式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>中断服务程序</strong>：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GpioHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XGpio_InterruptGetStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GpioInstance)) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 读取中断状态</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        XGpio_InterruptClear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GpioInstance, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 清除中断标志</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        KEY_FLAG </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                             // 更新按键状态</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span><strong>注意事项</strong></span></a></h4><ol><li><strong>硬件差异</strong>：AX7020与AX7010的LED连接至不同MIO引脚，需核对原理图。</li><li><strong>电压匹配</strong>：确保MIO BANK0/BANK1电压与外设一致。</li><li><strong>中断冲突</strong>：避免多个中断共享相同优先级或通道。</li></ol><hr><p>通过本实验，可掌握PS端MIO的GPIO控制与中断配置方法，为复杂外设开发奠定基础。</p>`,24)]))}const k=s(t,[["render",e],["__file","chapter6.html.vue"]]),p=JSON.parse('{"path":"/experiment/chapter6.html","title":"实验6；PS端MIO的使用","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1743470207000,"updatedTime":1749345260000,"contributors":[{"name":"Xianzhong Zhou","username":"Xianzhong Zhou","email":"zhouxzh@gdut.edu.cn","commits":2,"url":"https://github.com/Xianzhong Zhou"}]},"readingTime":{"minutes":2.16,"words":647},"filePathRelative":"experiment/chapter6.md","localizedDate":"2025年4月1日"}');export{k as comp,p as data};
