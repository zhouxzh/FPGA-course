import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as a,o as l}from"./app-K29S6iA3.js";const n={};function t(d,i){return l(),s("div",null,i[0]||(i[0]=[a(`<h1 id="第5讲-系统级设计技术" tabindex="-1"><a class="header-anchor" href="#第5讲-系统级设计技术"><span>第5讲：系统级设计技术</span></a></h1><h2 id="_5-1-基于ip核的模块化设计流程" tabindex="-1"><a class="header-anchor" href="#_5-1-基于ip核的模块化设计流程"><span>5.1 基于IP核的模块化设计流程</span></a></h2><ol><li>IP核分类与标准化 <ul><li>软核（Soft IP）：可综合的HDL代码</li><li>固核（Firm IP）：网表级IP</li><li>硬核（Hard IP）：物理布局的GDSII文件</li></ul></li><li>Vivado IP Integrator设计流程<div class="language-tcl line-numbers-mode" data-highlighter="shiki" data-ext="tcl" data-title="tcl" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">create_bd_design </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;system&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">create_ip -name clk_wiz -vendor xilinx -library ip -version </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [get_ips]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">create_ip -name axi_interconnect -vendor xilinx -library ip [get_ips]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>IP封装规范 <ul><li>接口标准化（AXI4/AXI4-Stream）</li><li>参数化配置界面</li><li>文档与验证用例</li></ul></li></ol><h2 id="_5-2-部分可重配置原理" tabindex="-1"><a class="header-anchor" href="#_5-2-部分可重配置原理"><span>5.2 部分可重配置原理</span></a></h2><ol><li>动态功能切换机制 <ul><li>静态逻辑与可重配置区域划分</li><li>比特流差异分析技术</li></ul></li><li>Vivado部分重配置流程<div class="language-tcl line-numbers-mode" data-highlighter="shiki" data-ext="tcl" data-title="tcl" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">set_property HD.RECONFIGURABLE </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [get_cells reconfig_region]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">create_partition_def -name pr_partition -module reconfig_module</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>应用场景 <ul><li>多模式通信系统</li><li>硬件功能动态升级</li><li>资源分时复用</li></ul></li></ol><h2 id="_5-3-软核处理器集成" tabindex="-1"><a class="header-anchor" href="#_5-3-软核处理器集成"><span>5.3 软核处理器集成</span></a></h2><table><thead><tr><th>特性</th><th>MicroBlaze</th><th>Nios II</th></tr></thead><tbody><tr><td>架构</td><td>32位RISC</td><td>32位RISC</td></tr><tr><td>时钟频率</td><td>200-400MHz</td><td>150-250MHz</td></tr><tr><td>存储接口</td><td>AXI4/LMB</td><td>Avalon-MM</td></tr><tr><td>调试接口</td><td>MDM（MicroBlaze Debug）</td><td>JTAG</td></tr></tbody></table><h2 id="_5-4-系统级验证策略-uvm基础" tabindex="-1"><a class="header-anchor" href="#_5-4-系统级验证策略-uvm基础"><span>5.4 系统级验证策略（UVM基础）</span></a></h2><ol><li>验证架构组成 <ul><li>Testbench拓扑结构</li><li>Sequence/Driver/Monitor组件</li></ul></li><li>典型验证场景<div class="language-systemverilog line-numbers-mode" data-highlighter="shiki" data-ext="systemverilog" data-title="systemverilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class axi_seq extends uvm_sequence;</span></span>
<span class="line"><span>  virtual task body();</span></span>
<span class="line"><span>    axi_transaction tx = axi_transaction::type_id::create(&quot;tx&quot;);</span></span>
<span class="line"><span>    start_item(tx);</span></span>
<span class="line"><span>    tx.randomize();</span></span>
<span class="line"><span>    finish_item(tx);</span></span>
<span class="line"><span>  endtask</span></span>
<span class="line"><span>endclass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>覆盖率驱动验证 <ul><li>功能覆盖率模型</li><li>断言覆盖率分析</li><li>回归测试策略</li></ul></li></ol>`,9)]))}const p=e(n,[["render",t],["__file","chapter5.html.vue"]]),c=JSON.parse('{"path":"/book/chapter5.html","title":"第5讲：系统级设计技术","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"5.1 基于IP核的模块化设计流程","slug":"_5-1-基于ip核的模块化设计流程","link":"#_5-1-基于ip核的模块化设计流程","children":[]},{"level":2,"title":"5.2 部分可重配置原理","slug":"_5-2-部分可重配置原理","link":"#_5-2-部分可重配置原理","children":[]},{"level":2,"title":"5.3 软核处理器集成","slug":"_5-3-软核处理器集成","link":"#_5-3-软核处理器集成","children":[]},{"level":2,"title":"5.4 系统级验证策略（UVM基础）","slug":"_5-4-系统级验证策略-uvm基础","link":"#_5-4-系统级验证策略-uvm基础","children":[]}],"git":{"createdTime":1738908357000,"updatedTime":1749345260000,"contributors":[{"name":"Xianzhong Zhou","username":"Xianzhong Zhou","email":"zhouxzh@gdut.edu.cn","commits":2,"url":"https://github.com/Xianzhong Zhou"}]},"readingTime":{"minutes":1.1,"words":331},"filePathRelative":"book/chapter5.md","localizedDate":"2025年2月7日"}');export{p as comp,c as data};
