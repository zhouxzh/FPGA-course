import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as i,e as n,r as t,o as e}from"./app-K29S6iA3.js";const k="/FPGA-course/assets/UART-CBjgYwqD.jpeg",p="/FPGA-course/assets/tx-XZX1T7-R.png",d="/FPGA-course/assets/rx-BeUjW2Cy.png",r="/FPGA-course/assets/uart_tb-CCamxtYT.png",A="/FPGA-course/assets/SPI-B_T0V950.jpeg",g="/FPGA-course/assets/SPI2-CJ_WWjIu.jpeg",B="/FPGA-course/assets/I2C-DyeFiEUw.jpeg",c={};function y(v,s){const a=t("Mermaid");return e(),h("div",null,[s[0]||(s[0]=i('<p><strong>数字系统</strong>通过其模拟和数字接口与外部世界通信。本章重点探讨现场可编程门阵列（FPGA）设计中的数字接口技术。我们将首先介绍串行通信协议，包括通用异步收发器（UART）、串行外设接口（SPI）和内部集成电路（I²C）。随后，我们将讨论通用串行总线（USB）和以太网连接。除以太网外，我们将为所有数字接口概念提供Verilog描述。为清晰阐述数字接口概念，本章还提供了相关应用实例。</p><h2 id="通用异步收发器" tabindex="-1"><a class="header-anchor" href="#通用异步收发器"><span>通用异步收发器</span></a></h2><p>通用异步收发器（UART）是一种用于两个或多个设备之间的数字通信协议。我们仅关注两个设备之间的UART通信。因此，一个设备作为发送器，另一个作为接收器。通信通过发送器和接收器之间的异步数据传输完成。由于是异步通信，UART不需要发送器和接收器之间的共同时钟，因此连接的设备可以独立工作。发送器的串行引脚通常称为发送（TX），对应的接收器引脚称为接收（RX）。发送器和接收器之间通过物理连接这两个引脚建立通信链路。</p><p>UART通信可以在不同设备之间建立。我们将特别关注目标FPGA开发板与PC之间的通信。为此，我们将开发发送器和接收器模块的硬件描述语言（HDL）实现。发送器模块本质上是一个移位寄存器，它加载并行数据并以特定速率通过设备的TX引脚逐位移出。接收器模块将通过RX引脚接收的串行数据转换为并行格式，供接收器处理。在深入HDL描述之前，让我们先了解UART的工作原理。</p><h3 id="uart工作原理" tabindex="-1"><a class="header-anchor" href="#uart工作原理"><span>UART工作原理</span></a></h3><p>要使用UART，我们需要理解其工作机制。因此，本节将介绍数据格式、时序、发送和接收操作。这些内容将帮助我们在下一节构建HDL描述。</p><h4 id="数据格式" tabindex="-1"><a class="header-anchor" href="#数据格式"><span>数据格式</span></a></h4><p>UART以数据包的形式传输数据。一个UART数据包的帧结构以起始位开始，后跟7到8个数据位，最后以一个或两个停止位结束。这种配置如图所示。 <img src="'+k+`" alt="uart"></p><h4 id="时序" tabindex="-1"><a class="header-anchor" href="#时序"><span>时序</span></a></h4><p>尽管UART以异步方式工作，但发送器和接收器必须具有相同的时序参数才能正确收发数据。换句话说，数据可以异步传输，但一旦传输开始，接收器必须知道UART数据包中每个脉冲的持续时间。这由波特率决定，它定义了时序。波特率的单位为比特每秒（bps）。例如，2400 bps表示UART传输中每个比特的宽度（或周期）为416微秒。</p><h4 id="发送操作" tabindex="-1"><a class="header-anchor" href="#发送操作"><span>发送操作</span></a></h4><p>我们可以将UART的发送操作描述为一个状态机。我们将在后续章节详细解释这个状态机。这里先简要概述：当发送器处于空闲模式时，TX引脚应保持逻辑电平1。一旦传输开始，数据发送线上会产生一个下降沿，唤醒接收器。随后，时钟根据波特率设置，发送器在每个时钟周期逐位发送所有数据。接收器必须具有相同的波特率才能顺序接收传输的比特。当发送操作完成时，TX引脚应设置为逻辑电平1并保持一个或两个比特宽度，以通知接收器传输结束。这部分称为停止位。停止位的数量和奇偶校验位的使用也应预先确定，以确保发送器和接收器具有相同的设置。</p><h4 id="接收操作" tabindex="-1"><a class="header-anchor" href="#接收操作"><span>接收操作</span></a></h4><p>我们可以将UART的接收操作描述为另一个状态机。接收器最初处于就绪状态。当RX引脚检测到下降沿信号（起始位）时，它开始顺序接收数据位。为此，接收器必须像发送器一样具有一个基于预定波特率的内部定时器。接收到起始位后，定时器等待一定时间以采样第一个数据位。这个偏移允许在第一个数据脉冲的中间位置开始采样过程。请注意，尽管数据由发送器以逻辑电平1和0发送，但这些信号会转换为模拟脉冲信号。因此，采样操作将接收到的模拟信号重新转换为逻辑电平0或1。随后，我们在每个连续的时间段执行采样操作以恢复数据位。当所有比特都以这种方式接收后，接收器检查接收数据中的奇偶校验位（如果协议包含）。当接收到停止位时，接收器返回到就绪状态，等待接收下一个数据包。</p><p>我们可以将发送和接收操作描述为Verilog中的两个独立模块。让我们从发送器模块开始。</p><h3 id="发送器模块的verilog实现" tabindex="-1"><a class="header-anchor" href="#发送器模块的verilog实现"><span>发送器模块的verilog实现</span></a></h3><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`timescale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 1ns / 1ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uart_tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk,           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// System clock</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rst_n,         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Active low reset</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_start,      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Start transmission signal</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] tx_data, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Data to transmit</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_done,       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Transmission complete signal</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Serial output</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Parameters for UART configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CLK_FREQ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 50MHz system clock</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BAUD_RATE = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Baud rate</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CLKS_PER_BIT = CLK_FREQ / BAUD_RATE;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // State machine states</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IDLE = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> START = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DATA = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> STOP = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Internal registers</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] state;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] next_state;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] clk_count;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] bit_index;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] tx_data_reg;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // State machine</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> negedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rst_n) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (!rst_n) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            state &lt;= IDLE;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            bit_index &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            tx_data_reg &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            tx &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Idle state is high</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            tx_done &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (state)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                IDLE: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    tx &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Idle state is high</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    tx_done &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    bit_index &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (tx_start) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        tx_data_reg &lt;= tx_data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        state &lt;= START;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                START: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    tx &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Start bit is low</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // Wait for one bit period</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk_count &lt; CLKS_PER_BIT - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= clk_count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        state &lt;= DATA;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                DATA: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    tx &lt;= tx_data_reg[bit_index];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // Wait for one bit period</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk_count &lt; CLKS_PER_BIT - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= clk_count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        // Check if we have sent all bits</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bit_index &lt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            bit_index &lt;= bit_index + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            bit_index &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            state &lt;= STOP;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                STOP: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    tx &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Stop bit is high</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // Wait for one bit period</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk_count &lt; CLKS_PER_BIT - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= clk_count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        tx_done &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        state &lt;= IDLE;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    state &lt;= IDLE;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            endcase</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="模块功能概述" tabindex="-1"><a class="header-anchor" href="#模块功能概述"><span><strong>模块功能概述</strong></span></a></h4><p>该模块实现了一个UART发送控制器，将8位并行数据转换为符合UART协议的串行数据流。关键功能包括：</p><ul><li><strong>异步复位</strong>（低电平有效）</li><li><strong>波特率可配置</strong>（基于系统时钟频率和波特率参数）</li><li><strong>状态机控制</strong>：处理空闲、起始位、数据位、停止位状态</li><li><strong>完成信号输出</strong>（<code>tx_done</code>）</li></ul><hr><h4 id="端口定义" tabindex="-1"><a class="header-anchor" href="#端口定义"><span><strong>端口定义</strong></span></a></h4><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uart_tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk,           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 系统时钟（50MHz）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rst_n,         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 低电平复位</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_start,      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 发送启动信号（上升沿触发）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] tx_data, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 待发送的8位数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_done,       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 发送完成标志（单周期脉冲）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 串行输出引脚</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="参数配置" tabindex="-1"><a class="header-anchor" href="#参数配置"><span><strong>参数配置</strong></span></a></h4><ul><li><strong><code>CLK_FREQ</code></strong>：系统时钟频率（默认50MHz）</li><li><strong><code>BAUD_RATE</code></strong>：波特率（默认115200）</li><li><strong><code>CLKS_PER_BIT</code></strong>：每个UART位所需的时钟周期数<br> 计算公式：<div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">CLKS_PER_BIT = CLK_FREQ / BAUD_RATE  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 例：50M/115200 ≈ 434</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="状态机设计" tabindex="-1"><a class="header-anchor" href="#状态机设计"><span><strong>状态机设计</strong></span></a></h4><p>使用四状态有限状态机（FSM）控制发送流程：</p><table><thead><tr><th>状态</th><th>描述</th><th>输出（<code>tx</code>）</th><th>持续时间</th></tr></thead><tbody><tr><td><strong>IDLE</strong></td><td>空闲状态</td><td>高电平</td><td>等待<code>tx_start</code>信号</td></tr><tr><td><strong>START</strong></td><td>发送起始位</td><td>低电平</td><td>1个位周期</td></tr><tr><td><strong>DATA</strong></td><td>发送8位数据（LSB优先）</td><td>数据位</td><td>8个位周期</td></tr><tr><td><strong>STOP</strong></td><td>发送停止位</td><td>高电平</td><td>1个位周期</td></tr></tbody></table><hr><h4 id="关键逻辑解析" tabindex="-1"><a class="header-anchor" href="#关键逻辑解析"><span><strong>关键逻辑解析</strong></span></a></h4><h5 id="_1-复位逻辑" tabindex="-1"><a class="header-anchor" href="#_1-复位逻辑"><span><strong>1. 复位逻辑</strong></span></a></h5><ul><li>复位时所有寄存器和输出初始化：<div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">state &lt;= IDLE;        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 回到空闲状态</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 计数器清零</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bit_index &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 数据位索引复位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tx &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 保持空闲高电平</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tx_done &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 完成信号置低</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_2-状态转移逻辑" tabindex="-1"><a class="header-anchor" href="#_2-状态转移逻辑"><span><strong>2. 状态转移逻辑</strong></span></a></h5><ul><li><strong>IDLE → START</strong>：<br> 检测到<code>tx_start</code>信号后，锁存数据到<code>tx_data_reg</code>，进入起始位状态。</li><li><strong>START → DATA</strong>：<br> 起始位持续<code>CLKS_PER_BIT</code>周期后进入数据发送。</li><li><strong>DATA → STOP</strong>：<br> 按<code>bit_index</code>顺序发送8位数据（LSB优先），完成后进入停止位。</li><li><strong>STOP → IDLE</strong>：<br> 停止位持续完成后，拉高<code>tx_done</code>并返回空闲。</li></ul><h5 id="_3-数据发送细节" tabindex="-1"><a class="header-anchor" href="#_3-数据发送细节"><span><strong>3. 数据发送细节</strong></span></a></h5><ul><li><strong>LSB优先</strong>：<br><code>bit_index</code>从0递增到7，依次发送<code>tx_data_reg[0]</code>到<code>tx_data_reg[7]</code>。</li><li><strong>位定时</strong>：<br> 每个状态通过<code>clk_count</code>计数器确保精确的位周期（<code>CLKS_PER_BIT</code>）。</li></ul><h5 id="_4-完成信号生成" tabindex="-1"><a class="header-anchor" href="#_4-完成信号生成"><span><strong>4. 完成信号生成</strong></span></a></h5><ul><li><strong><code>tx_done</code></strong>：<br> 在停止位状态的最后一个时钟周期置高，持续一个时钟周期。</li></ul><hr><h4 id="关键设计要点" tabindex="-1"><a class="header-anchor" href="#关键设计要点"><span><strong>关键设计要点</strong></span></a></h4><ol><li><p><strong>波特率精度</strong><br> 通过整数除法计算<code>CLKS_PER_BIT</code>，可能引入微小误差（例如50MHz/115200≈434），需确保误差在可接受范围内（通常&lt;3%）。</p></li><li><p><strong>数据锁存</strong><br><code>tx_data</code>在<code>tx_start</code>有效时被锁存到<code>tx_data_reg</code>，确保发送过程中数据稳定。</p></li><li><p><strong>抗干扰设计</strong></p><ul><li>仅在<code>IDLE</code>状态响应<code>tx_start</code>，防止发送过程中被意外打断。</li><li>状态机包含<code>default</code>分支，增强鲁棒性。</li></ul></li><li><p><strong>时序对齐</strong><br> 每个状态的计数器从0到<code>CLKS_PER_BIT-1</code>，确保精确的位周期（如434周期对应115200波特率）。</p></li></ol><hr><h4 id="潜在改进点" tabindex="-1"><a class="header-anchor" href="#潜在改进点"><span><strong>潜在改进点</strong></span></a></h4><ul><li><strong>校验位支持</strong>：可扩展状态机添加奇偶校验位。</li><li><strong>可配置帧格式</strong>：通过参数支持不同数据位宽（如7/9位）或停止位数。</li><li><strong>双缓冲机制</strong>：添加数据缓冲区，允许在发送过程中预加载下一帧数据。</li></ul><hr><h4 id="仿真测试建议" tabindex="-1"><a class="header-anchor" href="#仿真测试建议"><span><strong>仿真测试建议</strong></span></a></h4><ol><li><strong>复位测试</strong>：验证复位后所有信号是否初始化为预期值。</li><li><strong>单字节发送</strong>：检查起始位、数据位、停止位的时序和电平。</li><li><strong>连续发送</strong>：验证<code>tx_done</code>脉冲能否正确触发下一次发送。</li><li><strong>波特率验证</strong>：测量实际位周期是否匹配理论值。</li></ol><hr><p>该模块完整实现了UART发送功能的核心逻辑，代码结构清晰，适合作为嵌入式系统或FPGA设计中的串行通信接口。</p><hr><h4 id="发送器测试模块" tabindex="-1"><a class="header-anchor" href="#发送器测试模块"><span>发送器测试模块</span></a></h4><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`timescale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 1ns / 1ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uart_rx_tb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Parameters</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CLK_PERIOD = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 50MHz clock (20ns period)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BAUD_RATE = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BIT_PERIOD = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / BAUD_RATE;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Bit period in ns</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DUT Signals</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rst_n;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rx;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] rx_data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rx_ready;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Instantiate DUT</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uart_rx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .CLK_FREQ(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 50MHz</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .BAUD_RATE(BAUD_RATE)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .clk(clk),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .rst_n(rst_n),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .rx(rx),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .rx_data(rx_data),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .rx_ready(rx_ready)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Clock generation</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    clk = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    forever</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #(CLK_PERIOD/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = ~</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Test sequence</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Initialize signals</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rst_n = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rx = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Reset sequence</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    #100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rst_n = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    #100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Test case 1: Send 0x55 (01010101)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    send_byte(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h55</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #(BIT_PERIOD*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Verify reception</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rx_data !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h55</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || rx_ready !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        $error(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test 1 failed: Received 0x%h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx_data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Test case 2: Send 0xAA (10101010)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    send_byte(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;hAA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #(BIT_PERIOD*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rx_data !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;hAA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || rx_ready !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        $error(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test 2 failed: Received 0x%h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx_data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // End simulation</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    $display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;All tests completed&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    $finish</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// UART byte transmission task</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> send_byte;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Start bit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        rx = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #BIT_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Data bits (LSB first)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i=i+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            rx = data[i];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            #BIT_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Stop bit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        rx = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #BIT_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endtask</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Monitor signals</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $monitor(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Time: %t, RX: %b, Data: 0x%h, Ready: %b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">            $time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx, rx_data, rx_ready);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Generate VCD file</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    $dumpfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;uart_rx_tb.vcd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    $dumpvars</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, uart_rx_tb);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="仿真结果" tabindex="-1"><a class="header-anchor" href="#仿真结果"><span>仿真结果</span></a></h4><p><img src="`+p+`" alt="tx"></p><h3 id="接收器模块的verilog实现" tabindex="-1"><a class="header-anchor" href="#接收器模块的verilog实现"><span>接收器模块的verilog实现</span></a></h3><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`timescale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 1ns / 1ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uart_rx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk,           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// System clock</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rst_n,         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Active low reset</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rx,            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Serial input</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rx_ready,      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Data ready signal</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] rx_data  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Received data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Parameters for UART configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CLK_FREQ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 50MHz system clock</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BAUD_RATE = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Baud rate</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CLKS_PER_BIT = CLK_FREQ / BAUD_RATE;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // State machine states</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IDLE = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;b000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> START = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;b001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DATA = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;b010</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> STOP = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;b011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CLEANUP = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;b100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Internal registers</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] state;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] clk_count;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] bit_index;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] rx_data_reg;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // State machine</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> negedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rst_n) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (!rst_n) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            state &lt;= IDLE;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            bit_index &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            rx_data_reg &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            rx_ready &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            rx_data &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (state)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                IDLE: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    rx_ready &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    bit_index &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // Detect start bit (falling edge on rx)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (rx == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        state &lt;= START;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                START: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // Wait for middle of start bit</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk_count &lt; (CLKS_PER_BIT - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) / </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= clk_count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        // Check if start bit is still low</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (rx == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                            // Reset counter for data bits</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            state &lt;= DATA;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                            // False start, go back to idle</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            state &lt;= IDLE;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                DATA: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // Wait for middle of data bit</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk_count &lt; CLKS_PER_BIT - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= clk_count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        // Sample the data bit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        rx_data_reg[bit_index] &lt;= rx;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        // Check if we have received all bits</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bit_index &lt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            bit_index &lt;= bit_index + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            bit_index &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            state &lt;= STOP;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                STOP: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // Wait for middle of stop bit</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk_count &lt; CLKS_PER_BIT - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= clk_count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        // Check if stop bit is high</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (rx == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            rx_ready &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            rx_data &lt;= rx_data_reg;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        state &lt;= CLEANUP;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                CLEANUP: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // Wait one clock cycle to clear rx_ready</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    state &lt;= IDLE;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    rx_ready &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    state &lt;= IDLE;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            endcase</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="模块概述" tabindex="-1"><a class="header-anchor" href="#模块概述"><span><strong>模块概述</strong></span></a></h4><p>该模块实现了一个UART接收器，负责从串行输入<code>rx</code>中异步接收数据，并将接收到的8位数据通过<code>rx_data</code>输出，同时用<code>rx_ready</code>信号指示数据就绪。</p><hr><h3 id="关键参数与信号" tabindex="-1"><a class="header-anchor" href="#关键参数与信号"><span><strong>关键参数与信号</strong></span></a></h3><ol><li><p><strong>参数配置</strong></p><ul><li><code>CLK_FREQ</code>：系统时钟频率（50MHz）。</li><li><code>BAUD_RATE</code>：波特率（115200）。</li><li><code>CLKS_PER_BIT</code>：每个UART位占用的时钟周期数，计算为<code>CLK_FREQ / BAUD_RATE</code>（约为434）。</li></ul></li><li><p><strong>状态定义</strong></p><ul><li><code>IDLE</code>：空闲状态，等待起始位。</li><li><code>START</code>：检测起始位有效性。</li><li><code>DATA</code>：接收8位数据。</li><li><code>STOP</code>：验证停止位。</li><li><code>CLEANUP</code>：清理状态，复位信号。</li></ul></li><li><p><strong>内部寄存器</strong></p><ul><li><code>state</code>：状态机当前状态。</li><li><code>clk_count</code>：位周期计数器。</li><li><code>bit_index</code>：当前接收的数据位索引（0-7）。</li><li><code>rx_data_reg</code>：临时存储接收的数据。</li></ul></li></ol><hr><h4 id="状态机详细流程" tabindex="-1"><a class="header-anchor" href="#状态机详细流程"><span><strong>状态机详细流程</strong></span></a></h4><h5 id="_1-idle状态" tabindex="-1"><a class="header-anchor" href="#_1-idle状态"><span><strong>1. IDLE状态</strong></span></a></h5><ul><li><strong>行为</strong>： <ul><li>复位<code>rx_ready</code>、<code>clk_count</code>、<code>bit_index</code>。</li><li>检测起始位：当<code>rx</code>出现下降沿（低电平），进入<code>START</code>状态。</li></ul></li><li><strong>关键点</strong>： <ul><li>未进行多次采样，可能受噪声干扰产生误触发。</li></ul></li></ul><h5 id="_2-start状态" tabindex="-1"><a class="header-anchor" href="#_2-start状态"><span><strong>2. START状态</strong></span></a></h5><ul><li><strong>行为</strong>： <ul><li>计数至起始位中点（<code>(CLKS_PER_BIT-1)/2</code>）。</li><li>在中点检查<code>rx</code>是否仍为低电平： <ul><li>是：进入<code>DATA</code>状态，开始接收数据。</li><li>否：回到<code>IDLE</code>，视为虚假起始位。</li></ul></li></ul></li><li><strong>关键点</strong>： <ul><li>中点采样确保起始位有效性，减少误判。</li></ul></li></ul><h5 id="_3-data状态" tabindex="-1"><a class="header-anchor" href="#_3-data状态"><span><strong>3. DATA状态</strong></span></a></h5><ul><li><strong>行为</strong>： <ul><li>计数满一个位周期（<code>CLKS_PER_BIT</code>）。</li><li>在周期结束时（非中点）采样<code>rx</code>，存入<code>rx_data_reg</code>。</li><li>接收完8位后进入<code>STOP</code>状态。</li></ul></li><li><strong>关键问题</strong>： <ul><li><strong>采样点错误</strong>：数据位采样发生在位周期末尾而非中点，易受信号跳变影响，可能导致数据错误。</li></ul></li></ul><h5 id="_4-stop状态" tabindex="-1"><a class="header-anchor" href="#_4-stop状态"><span><strong>4. STOP状态</strong></span></a></h5><ul><li><strong>行为</strong>： <ul><li>计数满一个位周期。</li><li>在周期结束时检查<code>rx</code>是否为高电平： <ul><li>是：将<code>rx_data_reg</code>输出至<code>rx_data</code>，并置位<code>rx_ready</code>。</li><li>否：未处理帧错误，直接进入清理状态。</li></ul></li></ul></li><li><strong>关键点</strong>： <ul><li>停止位检查在末尾，而非中点，可能无法有效验证停止位完整性。</li></ul></li></ul><h5 id="_5-cleanup状态" tabindex="-1"><a class="header-anchor" href="#_5-cleanup状态"><span><strong>5. CLEANUP状态</strong></span></a></h5><ul><li><strong>行为</strong>： <ul><li>复位<code>rx_ready</code>，回到<code>IDLE</code>状态。</li></ul></li><li><strong>作用</strong>： <ul><li>确保<code>rx_ready</code>仅持续一个时钟周期，避免重复读取。</li></ul></li></ul><hr><h4 id="潜在问题与改进" tabindex="-1"><a class="header-anchor" href="#潜在问题与改进"><span><strong>潜在问题与改进</strong></span></a></h4><ol><li><p><strong>数据位采样点错误</strong></p><ul><li><strong>问题</strong>：当前在数据位末尾采样，易受信号跳变影响。</li><li><strong>改进</strong>：在数据位中点（<code>CLKS_PER_BIT/2</code>）采样，提高稳定性。</li><li><strong>修改示例</strong>：<div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DATA: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk_count &lt; CLKS_PER_BIT - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        clk_count &lt;= clk_count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 在中点采样</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk_count == (CLKS_PER_BIT/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            rx_data_reg[bit_index] &lt;= rx;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            bit_index &lt;= bit_index + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        clk_count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bit_index &gt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) state &lt;= STOP;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>停止位验证不足</strong></p><ul><li><strong>问题</strong>：未在中点检查停止位，可能接收不完整帧。</li><li><strong>改进</strong>：在中点验证停止位，若无效则丢弃数据。</li></ul></li><li><p><strong>无帧错误处理</strong></p><ul><li><strong>问题</strong>：未检测停止位错误，错误数据仍被输出。</li><li><strong>改进</strong>：添加帧错误标志（如<code>rx_error</code>），供外部处理。</li></ul></li></ol><hr><ul><li><strong>功能</strong>：代码实现了基本的UART接收功能，但存在采样点错误和验证不严谨的问题。</li><li><strong>改进方向</strong>：调整数据位采样点为中点，增强停止位检查，添加错误处理逻辑。</li><li><strong>应用场景</strong>：适用于对稳定性要求不高的场景，需谨慎用于高噪声或精确通信环境。</li></ul><h4 id="测试模块" tabindex="-1"><a class="header-anchor" href="#测试模块"><span>测试模块</span></a></h4><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`timescale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 1ns / 1ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uart_rx_tb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Parameters</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CLK_PERIOD = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 50MHz clock (20ns period)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BAUD_RATE = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BIT_PERIOD = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / BAUD_RATE;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Bit period in ns</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DUT Signals</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rst_n;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rx;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] rx_data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rx_ready;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Instantiate DUT</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uart_rx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .CLK_FREQ(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 50MHz</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .BAUD_RATE(BAUD_RATE)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .clk(clk),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .rst_n(rst_n),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .rx(rx),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .rx_data(rx_data),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .rx_ready(rx_ready)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Clock generation</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    clk = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    forever</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #(CLK_PERIOD/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = ~</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Test sequence</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Initialize signals</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rst_n = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rx = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Reset sequence</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    #100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rst_n = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    #100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Test case 1: Send 0x55 (01010101)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    send_byte(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h55</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #(BIT_PERIOD*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Verify reception</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rx_data !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h55</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || rx_ready !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        $error(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test 1 failed: Received 0x%h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx_data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Test case 2: Send 0xAA (10101010)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    send_byte(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;hAA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #(BIT_PERIOD*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rx_data !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;hAA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || rx_ready !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        $error(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test 2 failed: Received 0x%h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx_data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // End simulation</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    $display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;All tests completed&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    $finish</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// UART byte transmission task</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> send_byte;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Start bit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        rx = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #BIT_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Data bits (LSB first)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i=i+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            rx = data[i];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            #BIT_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Stop bit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        rx = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #BIT_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endtask</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Monitor signals</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $monitor(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Time: %t, RX: %b, Data: 0x%h, Ready: %b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">            $time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx, rx_data, rx_ready);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Generate VCD file</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    $dumpfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;uart_rx_tb.vcd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    $dumpvars</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, uart_rx_tb);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="仿真结果-1" tabindex="-1"><a class="header-anchor" href="#仿真结果-1"><span>仿真结果</span></a></h4><p><img src="`+d+`" alt="rx"></p><hr><h3 id="联合发送器模块与接收器模块的仿真结果" tabindex="-1"><a class="header-anchor" href="#联合发送器模块与接收器模块的仿真结果"><span>联合发送器模块与接收器模块的仿真结果</span></a></h3><h4 id="测试模块代码" tabindex="-1"><a class="header-anchor" href="#测试模块代码"><span>测试模块代码</span></a></h4><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`timescale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 1ns / 1ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uart_tb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Parameters</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CLK_PERIOD = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 50MHz clock (20ns period)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BAUD_RATE = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BIT_PERIOD = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / BAUD_RATE;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Bit period in ns</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Testbench signals</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rst_n;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rx;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rx_ready;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] rx_data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Test control signals</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] test_data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_start;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_done;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Instantiate UART transmitter (to generate test signals)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    uart_tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .CLK_FREQ(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .BAUD_RATE(BAUD_RATE)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uart_tx_inst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .clk(clk),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .rst_n(rst_n),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .tx_start(tx_start),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .tx_data(test_data),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .tx_done(tx_done),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .tx(rx)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Connect TX output to RX input</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Instantiate UART receiver</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    uart_rx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .CLK_FREQ(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .BAUD_RATE(BAUD_RATE)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .clk(clk),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .rst_n(rst_n),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .rx(rx),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .rx_ready(rx_ready),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .rx_data(rx_data)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Clock generation</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        clk = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        forever</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #(CLK_PERIOD/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = ~</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Test sequence</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Initialize signals</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        rst_n = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        tx_start = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        test_data = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Apply reset</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        #100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        rst_n = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        #100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Test case 1: Send character &#39;A&#39; (0x41)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        test_data = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h41</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        tx_start = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #CLK_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        tx_start = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Wait for transmission to complete</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_done);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #(BIT_PERIOD * </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Verify received data</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (rx_data !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h41</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || rx_ready !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            $error(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test 1 Failed: Received 0x%h, Expected 0x41&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx_data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Test case 2: Send character &#39;Z&#39; (0x5A)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        test_data = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h5A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        tx_start = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #CLK_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        tx_start = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Wait for transmission to complete</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_done);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #(BIT_PERIOD * </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Verify received data</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (rx_data !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;h5A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || rx_ready !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            $error(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test 2 Failed: Received 0x%h, Expected 0x5A&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx_data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Test case 3: Send random data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        test_data = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;hA5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        tx_start = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #CLK_PERIOD;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        tx_start = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Wait for transmission to complete</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tx_done);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #(BIT_PERIOD * </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Verify received data</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (rx_data !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;hA5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || rx_ready !== </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            $error(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test 3 Failed: Received 0x%h, Expected 0xA5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx_data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // End simulation</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        $display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;All tests completed successfully&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        $finish</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Monitor signals</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        $monitor(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Time: %t, RX: %b, Data: 0x%h, Ready: %b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">                $time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, rx, rx_data, rx_ready);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Generate VCD file for waveform viewing</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    initial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        $dumpfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;uart_tb.vcd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        $dumpvars</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, uart_tb);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="仿真结果-2" tabindex="-1"><a class="header-anchor" href="#仿真结果-2"><span>仿真结果</span></a></h4><p><img src="`+r+'" alt="uart_tb"></p><h3 id="spi工作原理" tabindex="-1"><a class="header-anchor" href="#spi工作原理"><span><strong>SPI工作原理</strong></span></a></h3><p>SPI（串行外设接口）的工作机制比UART更为简洁。为深入理解其原理，本节将重点解析四大核心要素：</p><ol><li><p><strong>数据格式</strong><br> SPI采用全双工同步传输，数据帧通常为8位或16位，支持MSB（高位优先）或LSB（低位优先）传输模式。时钟极性（CPOL）与时钟相位（CPHA）的组合形成四种工作时序模式。</p></li><li><p><strong>连接拓扑</strong><br> 典型SPI系统包含以下信号线：</p><ul><li>SCLK：主设备提供的同步时钟</li><li>MOSI：主设备输出/从设备输入</li><li>MISO：主设备输入/从设备输出</li><li>SS：从设备选择线（低电平有效）</li></ul></li><li><p><strong>传输机制</strong><br> 主设备通过拉低SS信号选择从设备后：</p><ul><li>主设备在SCLK边沿（由CPHA决定）通过MOSI发送数据</li><li>从设备同步通过MISO返回数据</li><li>每个时钟周期完成1位数据的双向传输</li></ul></li><li><p><strong>时序特性</strong></p><ul><li>时钟频率可达数十MHz（远高于UART）</li><li>数据有效性由CPOL/CPHA决定： <ul><li>CPOL=0时，SCLK空闲为低电平</li><li>CPHA=0时，数据在时钟第一个边沿采样</li></ul></li></ul></li></ol><h4 id="spi数据格式" tabindex="-1"><a class="header-anchor" href="#spi数据格式"><span><strong>SPI数据格式</strong></span></a></h4><p>与UART不同，SPI的数据包长度可自由配置，这一特性赋予用户极大的灵活性。由于采用专用时钟线和使能信号，SPI无需UART的起止位，仅需通信双方预先约定数据包长度即可实现可靠传输。</p><h4 id="spi连接拓扑" tabindex="-1"><a class="header-anchor" href="#spi连接拓扑"><span><strong>SPI连接拓扑</strong></span></a></h4><p>SPI采用四线制连接（如图所示）：</p><ul><li><strong>SCK</strong>：同步时钟（主设备产生）</li><li><strong>MOSI</strong>：主设备输出/从设备输入</li><li><strong>MISO</strong>：主设备输入/从设备输出</li><li><strong>SS</strong>：从设备选择信号（低有效）</li></ul><p><img src="'+A+'" alt="SPI主从设备连接示意图"></p><h4 id="spi传输机制" tabindex="-1"><a class="header-anchor" href="#spi传输机制"><span><strong>SPI传输机制</strong></span></a></h4><p>主设备通过SCK和SS信号控制通信流程：</p><ol><li>空闲状态下SS为高电平，SCK电平由SPI模式决定</li><li>主设备拉低SS信号激活从设备</li><li>每个SCK周期完成1位数据的双向传输（MOSI发送/MISO接收）</li><li>传输结束后SS恢复高电平</li></ol><h4 id="spi时序模式" tabindex="-1"><a class="header-anchor" href="#spi时序模式"><span><strong>SPI时序模式</strong></span></a></h4><p>通过CPOL（时钟极性）和CPHA（时钟相位）可组合出四种工作模式：</p><table><thead><tr><th>模式</th><th>CPOL</th><th>CPHA</th><th>时钟特性</th><th>数据采样边沿</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>空闲低电平，上升沿有效</td><td>时钟上升沿采样</td></tr><tr><td>1</td><td>0</td><td>1</td><td>空闲低电平，下降沿有效</td><td>时钟下降沿采样</td></tr><tr><td>2</td><td>1</td><td>0</td><td>空闲高电平，下降沿有效</td><td>时钟下降沿采样</td></tr><tr><td>3</td><td>1</td><td>1</td><td>空闲高电平，上升沿有效</td><td>时钟上升沿采样</td></tr></tbody></table><p><img src="'+g+`" alt="图12.3 SPI时序图"></p><h3 id="verilog实现方案" tabindex="-1"><a class="header-anchor" href="#verilog实现方案"><span><strong>Verilog实现方案</strong></span></a></h3><h4 id="主设备发送模块" tabindex="-1"><a class="header-anchor" href="#主设备发送模块"><span><strong>主设备发送模块</strong></span></a></h4><p>代码清单展示了主设备发送模块的Verilog实现：</p><ul><li><strong>输入端口</strong>：clk（系统时钟）、data（待发送数据）、send（发送触发）</li><li><strong>输出端口</strong>：sck（SPI时钟）、mosi（主出从入）、ss（片选）、busy（忙标志）</li><li><strong>关键参数</strong>：可配置数据包长度，默认2MHz时钟频率，CPOL=CPHA=0</li></ul><p><strong>状态机工作流程</strong>：</p><ol><li><strong>RDY状态</strong>：等待send触发信号</li><li><strong>START状态</strong>：拉低SS，加载首比特数据</li><li><strong>TRANSMIT状态</strong>：逐位发送数据</li><li><strong>STOP状态</strong>：释放SS，返回就绪状态</li></ol><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SPI_leader_transmitter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(clk,data,send,sck,ss,mosi,busy);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data length=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [data length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> send;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sck=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ss=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mosi;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> busy=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RDY=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, START=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, TRANSMIT=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, STOP=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] state=RDY;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] clkdiv=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] index=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @ (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//sck is set to 2 MHz</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clkdiv == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;d24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   clkdiv &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      sck &lt;= ~sck;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clkdiv &lt;= clkdiv + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @ (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">negedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sck)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (state)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RDY:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (send)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       state &lt;= START;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      index &lt;= data_length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">START :</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        SS &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      mosi &lt;= data[index];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      index &lt;= index - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= TRANSMIT;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">TRANSMIT:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (index == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       state &lt;= STOP;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        mosi &lt;= data[index] ;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        index &lt;= index - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">STOP:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        SS &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      state &lt;= RDY;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endcase</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是跟随器-发射器模块的Verilog描述。作为跟随模块，其输入信号为sck、ss和data，输出信号为miso和busy。时序模式CPOL和CPHA设置为0，因此所有状态变化都发生在sck的下降沿。 该模块（作为状态机）的工作原理与领导者-发射器模块类似，主要区别如下：状态机初始处于RDY状态，由领导者-接收器产生的sck下降沿触发。当ss为逻辑0电平时，busy变为逻辑1电平。数据向量的首bit被加载到mosi，随后状态机进入TRANSMIT状态开始传输数据。当index归零时，所有数据位已发送完毕，状态机转入STOP状态（复位index并置busy为0），随后返回RDY状态等待ss信号的下次触发。</p><h4 id="_12-2-2-2-接收器模块" tabindex="-1"><a class="header-anchor" href="#_12-2-2-2-接收器模块"><span>12.2.2.2 接收器模块</span></a></h4><p>接收端同样分为领导者和跟随者两种模式：</p><ol><li>跟随方接收模块 输入sck/ss/mosi，输出data/busy/ready。 核心特征：</li></ol><ul><li><code>busy=1</code>表示数据接收中</li><li><code>ready=1</code>时有效数据在data总线就绪</li><li>数据长度通过参数可配置</li></ul><p>工作原理：</p><ul><li>初始化<code>data_temp=0</code>，<code>index=data_length-1</code></li><li>状态机RDY→RECEIVE→STOP循环： <ul><li>RDY状态在每个sck上升沿检测ss=0</li><li>接收到起始信号后加载首bit，<code>busy=1</code>，<code>ready=0</code></li><li>RECEIVE状态形如移位寄存器逐bit接收</li><li>index归零时置位ready并回写data总线</li><li>需与领导者-发射器模块协同工作</li></ul></li></ul><ol><li>领导方接收模块 输入clk/miso/get信号，输出data/sck/ss/busy/ready。核心特征：</li></ol><ul><li>主时钟分频输出2MHz的sck</li><li><code>get=1</code>触发接收流程</li><li>接收完成时<code>ready=1</code></li></ul><p>工作原理：</p><ul><li>状态机RDY→RECEIVE→STOP循环： <ul><li>RDY状态等待get信号触发</li><li>RECEIVE阶段<code>ss=0</code>启动SPI会话</li><li>每个sck上升沿接收数据位</li><li>index归零后写data总线，<code>ready=1</code></li><li>需与跟随器-发射器模块协同工作</li></ul></li></ul><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SPI_follower_receiver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (sck,ss, mosi, data, busy, ready) ;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data length=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sck;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ss;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mosi;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [data length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> busy=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ready=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RDY=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, RECEIVE=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, STOP=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] state=RDY;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [data length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data temp=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] index=data length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @ (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sck)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (state)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RDY :</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (!ss)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       data temp[index] &lt;= mosi;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        index &lt;= index - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ready &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       state &lt;= RECEIVE;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RECEIVE:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (index == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= STOP;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index &lt;= index - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        data temp[index] &lt;= mosi;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">STOP :</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ready &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        data temp &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        data &lt;= data temp;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        index &lt;= data length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= RDY;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endcase</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SPI_leader_receiver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk, miso, get, data, sck, ss, busy, ready) ;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data length=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> miso;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> get;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [data length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sck=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ss=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> busy=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ready=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RDY=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, RECEIVE=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, STOP=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] state=RDY;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [data_length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data_temp=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] clkdiv=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] index=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @ (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//sck is set to 2 MHz</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clkdiv == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;d24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       clkdiv &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       sck &lt;= ~sck ;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  clkdiv &lt;= clkdiv + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @ (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sck)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (state)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RDY:                           </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       SS &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       state &lt;= RECEIVE;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       ready &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       data temp &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       index &lt;= data_length-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RECEIVE:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (index == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) state &lt;= STOP;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         data temp[index] &lt;= miso;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         index &lt;= index - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">STOP:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         ready &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        SS &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         data &lt;= data temp;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       state &lt;= RDY;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endcase</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="i2c-总线工作原理" tabindex="-1"><a class="header-anchor" href="#i2c-总线工作原理"><span>I²C 总线工作原理</span></a></h4><p>I²C 是支持多主多从架构的数字设备间串行通信协议，本书主要探讨双设备通信场景。本节将从数据格式、连接原理图和收发机制三方面解析其工作原理。</p><h3 id="数据格式-i2c-协议核心特征" tabindex="-1"><a class="header-anchor" href="#数据格式-i2c-协议核心特征"><span>数据格式*I²C 协议核心特征：</span></a></h3><ul><li>每个从设备持有唯一地址（通常7bit，可扩展至8/10bit）</li><li>通信起始于主设备发送从机地址</li><li>数据以8bit为单元传输，每单元包含： <ul><li>7bit地址/指针/数据</li><li>1bit应答位（ACK）</li></ul></li><li>接收端通过组合多单元数据包解析信息</li></ul><h3 id="连接原理" tabindex="-1"><a class="header-anchor" href="#连接原理"><span>连接原理</span></a></h3><p>标准I²C系统构成：</p><ul><li>双线制总线： <ul><li>串行数据线（SDA）</li><li>串行时钟线（SCL） --共需四线连接：</li><li>SDA/SCL总线</li><li>共地线（GND）</li><li>供电线（VDD）</li></ul></li><li>关键电路特性： <ul><li>SDA/SCL均通过上拉电阻接VDD</li><li>总线闲置时保持逻辑1电平</li></ul></li></ul><p><img src="`+B+`" alt="I2C"></p><h4 id="_12-3-2-verilog中的i2c实现" tabindex="-1"><a class="header-anchor" href="#_12-3-2-verilog中的i2c实现"><span><strong>12.3.2 Verilog中的I2C实现</strong></span></a></h4><p>我们提供了I2C主控模块的Verilog描述。该模块包含六个输入信号：clk、reset_n、ena、addr、rw和data_wr。其中，clk对应模块使用的时钟信号；reset_n表示低电平有效的复位信号；ena为高电平有效的使能信号；addr表示待连接从设备的地址；rw为读/写控制输入——当该信号为逻辑1时模块执行读操作，否则执行写操作。</p><p>模块设有四个输出信号：busy、data_rd、ack_error和eop。当模块正在传输或接收数据时，busy将保持逻辑1电平；data_rd显示从从设备读取的数据；ack_error表示高电平有效的应答错误标志；eop指示数据包传输结束。此外，模块还包含双向信号sda和scl，分别对应I2C的串行数据和串行时钟信号。</p><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> I2C_leader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (clk, reset n, ena, addr, rw, data wr, busy, data rd,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ack error,eop,sda,scl);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> reset n;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ena;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] addr;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rw;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data wr;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> busy ;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data rd;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ack error;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eop=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sda;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bus clk=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">400000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">localparam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> READY=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4&#39;b000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, START=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4&#39;b0001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, COMMAND=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4&#39;b0010</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, SLV ACK1=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    b0011, WR=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4&#39;b0100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, RD=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4&#39;b0101</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, SLV ACK2=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4&#39;b0110</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MSTR ACK=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4&#39;b0111</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    STOP=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4&#39;b1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] state;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> divider=(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk/bus clk) /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data clk prev;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scl clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scl ena=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sda int=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sda ena n;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] addr rw;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data tx;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data rx;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] bit cnt=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;d7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] count;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @ (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">negedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> reset n)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (reset n == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data clk prev &lt;= data clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(count == divider*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) count &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">count &lt;= count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (count &gt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; count &lt; divider-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">scl clk &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data clk &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (count &gt;= divider &amp;&amp; count &lt; divider*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">scl clk &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data clk &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (count &gt;= divider*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; count &lt; divider*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">scl clk &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data clk &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (count &gt;= divider*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; count &lt; divider*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">scl clk &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data clk &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">scl_clk &lt;= scl_clk;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data clk &lt;= data clk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @ (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">negedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> reset n)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (reset n == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">state &lt;= READY;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">scl ena &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sda int &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ack error &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bit cnt &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;d7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data rd &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (data clk == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; data clk prev == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (state)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">READY:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ena == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       addr_rw &lt;= {addr,rw};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      data tx &lt;= data wr;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       state &lt;= START;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       state &lt;= READY;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">START:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= addr rw[bit cnt];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">state &lt;= COMMAND;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">COMMAND :</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bit cnt == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        bit cnt &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;d7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= SLV ACK1;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        bit cnt &lt;= bit cnt - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= addr rw[bit cnt-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] ;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= COMMAND;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SLV ACK1:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (addr rw[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= data tx[bit cnt];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= WR;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= RD;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">WR :</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bit cnt == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        bit cnt &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;d7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= SLV ACK2;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bit cnt == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        bit cnt &lt;= bit cnt - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda_int &lt;= data_tx[bit_cnt-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        eop &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        bit cnt &lt;= bit cnt - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= data tx [bit cnt-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] ;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= WR;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RD:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bit cnt == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ena == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; addr_rw == {addr,rw}) sda_int &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sda int &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        bit cnt &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3&#39;d7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        data rd &lt;= data rx;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= MSTR ACK;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bit_cnt == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        bit cnt &lt;= bit cnt - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        eop &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        bit_cnt &lt;= bit_cnt - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= RD;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SLV ACK2 :</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ena == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        eop &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        addr_rw &lt;= {addr,rw};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        data_tx &lt;= data_wr;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (addr_rw == {addr,rw})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= data wr[bit cnt];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= WR;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> state &lt;= START;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        eop &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= STOP;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MSTR ACK:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ena == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        eop &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        busy = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        addr_rw &lt;= {addr,rw};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        data tx &lt;= data wr;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (addr rw == {addr,rw})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sda int &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= RD;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> state &lt;= START;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        eop &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= STOP;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">STOP:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        busy &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        state &lt;= READY;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将I²C主控模块的工作原理解释为状态机。该状态机包含九个状态：READY（就绪）、START（起始）、COMMAND（命令）、SLV_ACK1（从机应答1）、WR（写入）、RD（读取）、SLV_ACK2（从机应答2）、MSTR_ACK（主机应答）和STOP（停止）。</p><p>状态机从<strong>READY</strong>状态开始，等待<strong>ena</strong>信号变为逻辑1。当<strong>ena</strong>有效时：</p><ul><li><strong>busy</strong>信号置为逻辑1</li><li>从机地址与<strong>rw</strong>位组合写入<strong>addr_rw</strong>向量</li><li><strong>data_wr</strong>数据存入<strong>data_tx</strong>向量</li><li>状态转为<strong>START</strong></li></ul><p>在<strong>START</strong>状态下，<strong>addr_rw</strong>向量的最高位被加载到<strong>sda_int</strong>（该信号直接控制<strong>sda</strong>端口），随后状态转入<strong>COMMAND</strong>。在此状态下，<strong>addr_rw</strong>向量通过<strong>sda</strong>线逐位传输。传输完成后，主控模块进入<strong>SLV_ACK1</strong>状态等待从机应答——此时从机需将<strong>sda</strong>线拉至逻辑0以示响应。若未收到应答，<strong>ack_error</strong>将置为逻辑1。</p><p>下一状态由<strong>rw</strong>输入决定：</p><ul><li>若<strong>rw</strong>为逻辑1，状态机进入<strong>RD</strong>（读取）状态，逐位接收数据并存入<strong>data_rd</strong>向量。当位计数器减至1时，<strong>eop</strong>置为逻辑1表示数据包接收完成；位计数器归零后，状态转为<strong>MSTR_ACK</strong>，主机会发送接收确认。</li><li>若<strong>rw</strong>为逻辑0，状态机进入<strong>WR</strong>（写入）状态，将<strong>data_tx</strong>向量数据通过<strong>sda_int</strong>逐位发送。位计数器为1时<strong>eop</strong>有效；全部数据发送后转入<strong>SLV_ACK2</strong>状态等待从机应答。</li></ul><p>在<strong>SLV_ACK2</strong>和<strong>MSTR_ACK</strong>状态下：</p><ul><li>若<strong>ena</strong>仍为逻辑1，则新的从机地址和<strong>rw</strong>位会写入<strong>addr_rw</strong>向量。若与之前值相同，状态机返回<strong>START</strong>实现重复起始条件；否则转入<strong>STOP</strong>状态，在I²C总线上生成停止信号，最终回到<strong>READY</strong>等待下一次传输。</li></ul><p>在上面的代码的I²C主控模块中，我们使用数据流建模的条件语句（如描述最后两行所示）。其结构为：</p><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assign</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> variable = condition ? </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : value_to_be_assigned;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种表达方式也可应用于其他Verilog描述中。</p><hr><h2 id="lvds技术详解及其在fpga中的应用" tabindex="-1"><a class="header-anchor" href="#lvds技术详解及其在fpga中的应用"><span>LVDS技术详解及其在FPGA中的应用</span></a></h2><h3 id="lvds技术概述" tabindex="-1"><a class="header-anchor" href="#lvds技术概述"><span>LVDS技术概述</span></a></h3><p>LVDS（Low-Voltage Differential Signaling，低电压差分信号）是一种用于高速数据传输的接口技术，由美国国家半导体（NS）于1994年提出。目前LVDS技术广泛应用于显示、通信、工业控制等领域。其核心特点是通过差分信号传输数据，利用低电压摆幅和电流驱动实现高性能信号传输。LVDS的基本特点如下表所示：</p><table><thead><tr><th>特性</th><th>参数值</th></tr></thead><tbody><tr><td>电压幅值</td><td>典型350mV（差分）</td></tr><tr><td>传输速率</td><td>可达3.125Gbps以上</td></tr><tr><td>功耗</td><td>比CMOS/TTL低10倍</td></tr><tr><td>抗干扰能力</td><td>强（共模抑制比高）</td></tr></tbody></table><hr><h3 id="lvds工作原理详细说明" tabindex="-1"><a class="header-anchor" href="#lvds工作原理详细说明"><span>LVDS工作原理详细说明</span></a></h3><p>LVDS技术的核心是通过差分信号传输机制实现高可靠性通信。以下从<strong>差分信号传输</strong>和<strong>电气特性</strong>两个方面展开说明。</p><hr><h4 id="一、差分信号传输机制" tabindex="-1"><a class="header-anchor" href="#一、差分信号传输机制"><span>一、差分信号传输机制</span></a></h4><h5 id="基本流程-结合图示" tabindex="-1"><a class="header-anchor" href="#基本流程-结合图示"><span>基本流程（结合图示）</span></a></h5>`,165)),n(a,{id:"mermaid-1449",code:"eJxLL0osyFDwCeJSAIKnvVOfr17/ZP/Cp/3bDaORebEKurp2Ci9XbnzateL5lK0vtq8Ha0AWAKmo8QlzCdauUXjWt/TZlG2EFOpiUYgsALYT2RVGqG7iAusoLk2CeOJp/8SXDY1AabAwuq3RyJxYsJLUvBQ0I6C2IxmB7J5oZA7CCADpZKXH"}),s[1]||(s[1]=i(`<ul><li><p><strong>发送端</strong>：</p><ul><li><strong>单端信号输入</strong>：输入信号为单端逻辑电平（如TTL/CMOS电平）。</li><li><strong>差分转换</strong>：驱动电路将单端信号转换为一对互补的差分信号（LVDS+和LVDS-），两者幅值相等、极性相反。 <ul><li>逻辑&quot;1&quot;：LVDS+ &gt; LVDS-（典型差值约350mV）。</li><li>逻辑&quot;0&quot;：LVDS+ &lt; LVDS-。</li></ul></li></ul></li><li><p><strong>传输通道</strong>：</p><ul><li>差分信号通过双绞线或PCB差分对传输，两条线紧密耦合，外部噪声会被共模抑制。</li></ul></li><li><p><strong>接收端</strong>：</p><ul><li><strong>差分比较</strong>：接收电路（差分放大器）比较LVDS+和LVDS-的电压差，恢复为单端信号。</li><li>噪声抑制：由于差分信号的共模噪声（如电磁干扰）在两条线上表现一致，接收端通过减法运算消除共模噪声。</li></ul></li></ul><h5 id="关键优势" tabindex="-1"><a class="header-anchor" href="#关键优势"><span>关键优势</span></a></h5><ul><li><strong>抗干扰能力</strong>：差分传输对外部噪声具有天然免疫力。</li><li><strong>低电磁辐射（EMI）</strong>：互补信号产生的磁场相互抵消，减少辐射。</li><li><strong>高速传输</strong>：差分信号的电压摆幅小（典型350mV），支持更高切换速率（可达Gbps级）。</li></ul><hr><h4 id="电气特性详解" tabindex="-1"><a class="header-anchor" href="#电气特性详解"><span>电气特性详解</span></a></h4><ol><li>差分阻抗（Differential Impedance） <ul><li><strong>典型值</strong>：100Ω（需与传输线阻抗匹配）。</li><li><strong>作用</strong>： <ul><li>确保信号完整性，避免反射导致的信号畸变。</li><li>实现功率匹配，最大化信号传输效率。</li></ul></li><li><strong>设计要点</strong>： <ul><li>PCB设计时需严格控制差分对的线宽、线距和介质厚度，以满足100Ω阻抗要求。</li><li>接收端通常并联100Ω终端电阻，吸收反射能量。</li></ul></li></ul></li><li>共模电压（Common-Mode Voltage） <ul><li><strong>典型值</strong>：1.2V（以地为参考）。</li><li><strong>定义</strong>：差分信号对（LVDS+和LVDS-）的平均电压。</li><li><strong>作用</strong>： <ul><li>确保接收端电路在共模电压范围内正常工作。</li><li>提供稳定的偏置点，避免信号超出接收器输入范围。</li></ul></li><li><strong>设计要点</strong>： <ul><li>发送端需通过偏置电路维持共模电压稳定（如1.2V）。</li><li>接收端需支持宽共模范围（通常±1V），以适应系统噪声和电压漂移。</li></ul></li></ul></li><li>摆率（Slew Rate） <ul><li><strong>范围</strong>：0.3-1.5ns（指电压从10%到90%的上升/下降时间）。</li><li><strong>意义</strong>： <ul><li>控制信号边沿的陡峭程度，直接影响信号带宽和EMI性能。</li><li>较低的摆率（较慢的边沿）可减少高频分量，降低电磁辐射。</li></ul></li><li><strong>设计权衡</strong>： <ul><li>摆率过高：增加高频噪声和EMI。</li><li>摆率过低：限制最大传输速率。</li></ul></li></ul></li></ol><p>LVDS通过<strong>差分信号传输</strong>和<strong>精密电气特性设计</strong>，实现了高速、低功耗、高抗干扰的通信。其核心在于利用差分对的互补性和共模抑制能力，结合优化的阻抗、共模电压和摆率控制，成为现代高速数字系统的关键技术之一。</p><hr><h3 id="lvds技术特点详细说明" tabindex="-1"><a class="header-anchor" href="#lvds技术特点详细说明"><span>LVDS技术特点详细说明</span></a></h3><p>LVDS技术核心特点包括<strong>低功耗</strong>（静态电流低至1.5mA）、<strong>Gbps级高速传输</strong>、<strong>强抗干扰能力</strong>（抑制共模噪声）和<strong>低电磁辐射（EMI）</strong>，适用于显示、工业控制等短距离高速场景；但其设计需<strong>严格阻抗匹配</strong>（通常100Ω），仅支持<strong>点对点连接</strong>，且<strong>传输距离受限</strong>（通常&lt;10米），长距离需借助中继或改用其他协议。 以下是其优势和局限性的详细分析：</p><hr><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span><strong>优势</strong></span></a></h4><ol><li><p><strong>低功耗</strong></p><ul><li><strong>原理</strong>：LVDS采用低压摆幅（典型值约350mV）和恒流源驱动（通常3.5mA），静态电流仅1.5mA，显著降低功耗。</li><li><strong>应用场景</strong>：适合便携式设备（如笔记本电脑、平板）、电池供电系统或需要长时间运行的场景。</li><li><strong>对比优势</strong>：相比传统CMOS或TTL电平（电压摆幅达数伏），功耗降低数十倍。</li></ul></li><li><p><strong>高速传输（Gbps级）</strong></p><ul><li><strong>原理</strong>：差分信号通过两条相位相反的信号线传输，减少信号跳变时间，支持高频率（可达数GHz）。</li><li><strong>典型速率</strong>：单通道可达3.125 Gbps，多通道并行可实现更高带宽（如FPD-Link技术）。</li><li><strong>应用场景</strong>：高清视频传输（如车载显示屏、医疗成像）、高速数据采集（如雷达、示波器）。</li></ul></li><li><p><strong>强抗干扰能力</strong></p><ul><li><strong>原理</strong>：差分信号对共模噪声（如电源波动、环境电磁干扰）具有天然抑制能力。两条信号线的噪声会被接收端抵消。</li><li><strong>可靠性</strong>：在工业环境、汽车电子等高噪声场景中表现优异，误码率低。</li></ul></li><li><p><strong>低EMI辐射</strong></p><ul><li><strong>原理</strong>：低电压摆幅和电流驱动模式减少了电磁辐射；差分信号产生的磁场相互抵消，进一步降低EMI。</li><li><strong>合规性</strong>：更容易通过FCC、CISPR等电磁兼容性认证，适合对EMI敏感的系统（如医疗设备）。</li></ul></li></ol><hr><h4 id="局限性" tabindex="-1"><a class="header-anchor" href="#局限性"><span><strong>局限性</strong></span></a></h4><ol><li><p><strong>需要严格阻抗控制</strong></p><ul><li><strong>设计要求</strong>：LVDS要求差分阻抗匹配（通常100Ω±10%），否则会导致信号反射和失真。</li><li><strong>实现难点</strong>：PCB设计需精确计算线宽、间距及叠层结构，需使用阻抗测试工具验证。</li><li><strong>成本影响</strong>：增加了设计复杂度及制造成本，尤其在多层板或高频材料中。</li></ul></li><li><p><strong>点对点拓扑限制</strong></p><ul><li><strong>拓扑约束</strong>：LVDS仅支持单一发送端到单一接收端的点对点连接，无法直接实现总线型或多节点通信。</li><li><strong>扩展方案</strong>：需通过中继器、交换芯片或桥接电路扩展拓扑，但会引入延迟和成本。</li></ul></li><li><p><strong>传输距离有限（通常&lt;10m）</strong></p><ul><li><strong>物理限制</strong>：长距离传输时，信号衰减和抖动加剧，导致误码率上升。</li><li><strong>解决方案</strong>：可通过电缆均衡、中继器延长至数十米，但需权衡成本和复杂度；更长距离需改用光纤或其他协议（如RS-485）。</li></ul></li></ol><hr><h4 id="lvds技术特点总结" tabindex="-1"><a class="header-anchor" href="#lvds技术特点总结"><span><strong>LVDS技术特点总结</strong></span></a></h4><table><thead><tr><th><strong>维度</strong></th><th><strong>LVDS优势</strong></th><th><strong>LVDS局限性</strong></th></tr></thead><tbody><tr><td><strong>功耗</strong></td><td>超低静态功耗，适合移动设备</td><td>-</td></tr><tr><td><strong>速率</strong></td><td>Gbps级传输，满足高速需求</td><td>长距离下速率受限</td></tr><tr><td><strong>抗干扰</strong></td><td>高可靠性，适合复杂电磁环境</td><td>-</td></tr><tr><td><strong>设计复杂度</strong></td><td>-</td><td>需严格阻抗控制，增加设计难度</td></tr><tr><td><strong>扩展性</strong></td><td>-</td><td>点对点拓扑限制多节点应用</td></tr></tbody></table><p><strong>替代技术选择</strong>：</p><ul><li>长距离传输：改用光纤、RS-485或以太网。</li><li>多节点总线：CAN、I2C或MIPI联盟的C-PHY。</li></ul><p>LVDS在短距离、高速、低功耗场景中优势显著，但需在设计初期权衡其拓扑和阻抗控制要求。</p><hr><h3 id="fpga中的lvds支持" tabindex="-1"><a class="header-anchor" href="#fpga中的lvds支持"><span>FPGA中的LVDS支持</span></a></h3><h4 id="主流fpga支持情况" tabindex="-1"><a class="header-anchor" href="#主流fpga支持情况"><span>主流FPGA支持情况</span></a></h4><table><thead><tr><th>厂商</th><th>系列示例</th><th>LVDS支持情况</th></tr></thead><tbody><tr><td>Xilinx</td><td>Artix-7/Kintex-7</td><td>支持，需使用SelectIO资源</td></tr><tr><td>Intel</td><td>Cyclone 10 GX</td><td>内置LVDS收发器</td></tr><tr><td>Lattice</td><td>ECP5</td><td>支持LVDS/SLVS等差分标准</td></tr></tbody></table><h4 id="fpga-lvds接口实现" tabindex="-1"><a class="header-anchor" href="#fpga-lvds接口实现"><span>FPGA LVDS接口实现</span></a></h4><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Xilinx FPGA LVDS示例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">OBUFDS lvds_tx_inst (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .O(lvds_p),    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 正相输出</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .OB(lvds_n),   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 反相输出</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .I(tx_data)    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 内部单端信号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">IBUFDS lvds_rx_inst (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .O(rx_data),   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 内部单端信号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .I(lvds_p),    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 正相输入</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .IB(lvds_n)    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 反相输入</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="lvds在fpga中的典型应用" tabindex="-1"><a class="header-anchor" href="#lvds在fpga中的典型应用"><span>LVDS在FPGA中的典型应用</span></a></h3><h4 id="高速数据传输" tabindex="-1"><a class="header-anchor" href="#高速数据传输"><span>高速数据传输</span></a></h4><ul><li>摄像头接口（如MIPI D-PHY）</li><li>显示接口（LCD面板驱动）</li><li>板间高速互联</li></ul><h4 id="时钟分配" tabindex="-1"><a class="header-anchor" href="#时钟分配"><span>时钟分配</span></a></h4>`,33)),n(a,{id:"mermaid-2017",code:"eJxLL0osyFDwCeJSAALHaLcAd0cF38TiktSiWAVdXQWfMJdgIG2n4ASRCs5JLEuNhShGkXeOdnRxjuUCAE4MFB8="}),s[2]||(s[2]=i(`<h4 id="具体案例-lvds-serdes" tabindex="-1"><a class="header-anchor" href="#具体案例-lvds-serdes"><span>具体案例：LVDS SerDes</span></a></h4><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 7:1串行化示例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RATIO = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [RATIO-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] parallel_data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] count = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lvds_clk) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    lvds_tx &lt;= parallel_data[count];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    count &lt;= (count == RATIO-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ? </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : count + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="lvds系统设计要点" tabindex="-1"><a class="header-anchor" href="#lvds系统设计要点"><span>LVDS系统设计要点</span></a></h4><ol><li><strong>阻抗匹配</strong>：必须确保传输线、终端电阻与差分阻抗一致（100Ω）。</li><li><strong>共模稳定性</strong>：通过偏置电路或共模反馈维持共模电压。</li><li><strong>噪声抑制</strong>： <ul><li>使用屏蔽双绞线或严格PCB布线规则。</li><li>避免差分对与其他信号线平行走线。</li></ul></li><li><strong>功耗优化</strong>：LVDS采用电流驱动（典型3.5mA），功耗显著低于电压驱动技术（如RS-422）。</li></ol><hr><h4 id="lvds的pcb设计要点" tabindex="-1"><a class="header-anchor" href="#lvds的pcb设计要点"><span>LVDS的PCB设计要点</span></a></h4><ul><li>保持差分对等长（ΔL &lt; 5mil）</li><li>避免90°拐角（建议45°或圆弧）</li><li>参考平面完整（避免跨分割）</li></ul><h4 id="lvds终端匹配" tabindex="-1"><a class="header-anchor" href="#lvds终端匹配"><span>LVDS终端匹配</span></a></h4>`,9)),n(a,{id:"mermaid-2084",code:"eJxLL0osyFDwCeJSAAKfMJdgbQVdXYWn29c97Wh7un4nkKOrEBRtaGBwbuXzKVtfztgdCxYCqdQF6wkCqX+yY+3T/c3PuvY+XbIFLB8WHW2oZxT2tHXjsxULgRqf9nXHxnIBAMmoLJs="}),s[3]||(s[3]=i(`<h4 id="lvds常见问题解决" tabindex="-1"><a class="header-anchor" href="#lvds常见问题解决"><span>LVDS常见问题解决</span></a></h4><table><thead><tr><th>问题现象</th><th>可能原因</th><th>解决方案</th></tr></thead><tbody><tr><td>信号完整性差</td><td>阻抗不匹配</td><td>检查走线阻抗</td></tr><tr><td>数据误码</td><td>时钟抖动大</td><td>优化时钟树/使用CDR</td></tr><tr><td>无法锁定</td><td>共模电压超出范围</td><td>检查终端电路</td></tr></tbody></table><hr><p>LVDS作为高速差分传输技术，在FPGA应用中具有显著优势：</p><ul><li>适合Gbps级数据传输</li><li>显著降低系统功耗</li><li>提升抗干扰能力</li></ul><p>未来随着SerDes技术发展，LVDS将继续在工业、医疗和通信领域发挥重要作用。</p><hr><h2 id="fpga实现hdmi接口的设计流程" tabindex="-1"><a class="header-anchor" href="#fpga实现hdmi接口的设计流程"><span><strong>FPGA实现HDMI接口的设计流程</strong></span></a></h2><h3 id="硬件设计" tabindex="-1"><a class="header-anchor" href="#硬件设计"><span><strong>硬件设计</strong></span></a></h3><ul><li><strong>HDMI接口电路</strong>： <ul><li>使用专用HDMI电平转换芯片（如Analog Devices的ADV7511或Silicon Image的SiI9136），将FPGA输出的低压差分信号（LVDS）转换为HDMI标准TMDS信号。</li><li>电路需满足阻抗匹配（100Ω差分阻抗）、ESD保护和电磁兼容性（EMC）要求。</li></ul></li><li><strong>FPGA选型</strong>：需支持高速串行接口（如Xilinx Artix-7/Kintex系列或Intel Cyclone V/10系列），并具备足够的逻辑资源与I/O速度。</li></ul><p>好的！TMDS（Transition Minimized Differential Signaling，最小化传输差分信号）是HDMI和DVI接口中用于高速数字视频传输的核心编码技术。其核心目标是通过减少信号跳变（Transition）和保持直流平衡（DC Balance），降低电磁干扰（EMI）并提高信号完整性。以下是TMDS编码的详细解析：</p><hr><h3 id="_1-hdmi接口基本原理" tabindex="-1"><a class="header-anchor" href="#_1-hdmi接口基本原理"><span><strong>1. HDMI接口基本原理</strong></span></a></h3><p>HDMI（High-Definition Multimedia Interface）是一种数字音视频传输协议，支持高分辨率视频（如1080p、4K）和多声道音频。其核心特点包括：</p><ul><li><strong>物理层</strong>：基于TMDS（Transition Minimized Differential Signaling）差分信号传输，通过3对数据通道（Data0/1/2）和1对时钟通道（Clock）实现高速串行通信。</li><li><strong>协议层</strong>：视频数据采用RGB或YCbCr格式编码，音频和辅助数据（如EDID、HDCP）通过数据岛（Data Island）传输。</li><li><strong>版本差异</strong>：不同版本（如HDMI 1.4/2.0/2.1）支持的分辨率、刷新率和带宽不同（例如HDMI 2.0支持18Gbps带宽，可传输4K@60Hz）。</li></ul><hr><h3 id="tmds编码的核心原理" tabindex="-1"><a class="header-anchor" href="#tmds编码的核心原理"><span><strong>TMDS编码的核心原理</strong></span></a></h3><h4 id="主要目标" tabindex="-1"><a class="header-anchor" href="#主要目标"><span><strong>主要目标</strong></span></a></h4><ul><li><strong>减少信号跳变</strong>：通过编码使相邻比特位之间的电平变化（0→1或1→0）最小化，降低EMI。</li><li><strong>直流平衡</strong>：编码后的数据流中0和1的数量接近平衡，避免信号因长期偏置（如过多0或1）导致电压漂移。</li><li><strong>时钟恢复</strong>：接收端可通过数据流中的跳变提取同步时钟。</li></ul><h4 id="编码流程" tabindex="-1"><a class="header-anchor" href="#编码流程"><span><strong>编码流程</strong></span></a></h4><p>TMDS编码分为两个阶段：<strong>8b/10b编码</strong>和<strong>差分传输</strong>。</p><ol><li><strong>8b/10b编码</strong>：将8位像素数据转换为10位符号。</li><li><strong>差分传输</strong>：通过一对差分线（如Data0+/Data0-）传输10位符号。</li></ol><hr><h3 id="_8b-10b编码的详细步骤" tabindex="-1"><a class="header-anchor" href="#_8b-10b编码的详细步骤"><span><strong>8b/10b编码的详细步骤</strong></span></a></h3><h4 id="输入数据分类" tabindex="-1"><a class="header-anchor" href="#输入数据分类"><span><strong>输入数据分类</strong></span></a></h4><ul><li><strong>视频数据（Video Period）</strong>：有效像素数据（RGB/YCbCr）。</li><li><strong>控制数据（Control Period）</strong>：同步信号（HSYNC/VSYNC）和消隐期。</li><li><strong>数据岛（Data Island Period）</strong>：音频和辅助数据包。</li></ul><p>不同数据类型使用不同的编码模式。</p><h4 id="编码过程" tabindex="-1"><a class="header-anchor" href="#编码过程"><span><strong>编码过程</strong></span></a></h4><h5 id="步骤1-判断编码模式" tabindex="-1"><a class="header-anchor" href="#步骤1-判断编码模式"><span><strong>步骤1：判断编码模式</strong></span></a></h5><ul><li><strong>视频数据模式</strong>：对8位像素数据进行最小化跳变编码。</li><li><strong>控制模式</strong>：使用固定的10位控制字符（如<code>0b1101010100</code>表示HSYNC和VSYNC的组合）。</li></ul><h5 id="步骤2-最小化跳变编码-仅视频数据" tabindex="-1"><a class="header-anchor" href="#步骤2-最小化跳变编码-仅视频数据"><span><strong>步骤2：最小化跳变编码（仅视频数据）</strong></span></a></h5><ol><li><strong>异或（XOR）或异或非（XNOR）选择</strong>： <ul><li>比较当前8位数据的跳变次数，选择XOR或XNOR操作，使跳变次数最少。</li><li><strong>规则</strong>：若输入数据中0的数量 &gt; 4，或0的数量=4且最低位为0，则使用XNOR，否则使用XOR。</li></ul></li><li><strong>生成9位中间数据</strong>： <ul><li>第9位（q_m）表示使用的操作类型（0=XOR，1=XNOR）。</li></ul></li></ol><p><strong>公式示例</strong>（以XOR为例）：</p><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q_out[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = D[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q_out[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = q_out[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] ^ D[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q_out[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 表示使用XOR</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="步骤3-直流平衡调整" tabindex="-1"><a class="header-anchor" href="#步骤3-直流平衡调整"><span><strong>步骤3：直流平衡调整</strong></span></a></h5><ul><li>统计已传输数据中1和0的数量差（偏差值）。</li><li>根据偏差值选择是否反转10位符号： <ul><li>若偏差值过大（&gt;0或&lt;0），则反转符号（0→1，1→0），并设置第10位为1表示反转。</li><li>否则保持原符号，第10位为0。</li></ul></li></ul><p><strong>最终10位符号格式</strong>：</p><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">符号 = {反转标志位, q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="控制字符编码" tabindex="-1"><a class="header-anchor" href="#控制字符编码"><span><strong>控制字符编码</strong></span></a></h4><p>在消隐期或同步阶段，直接使用预定义的10位控制字符：</p><ul><li><strong>HSYNC和VSYNC组合</strong>：例如<code>0b1101010100</code>。</li><li><strong>数据岛包头</strong>：特定控制字符标识音频或辅助数据的开始。</li></ul><hr><h3 id="tmds编码示例" tabindex="-1"><a class="header-anchor" href="#tmds编码示例"><span><strong>TMDS编码示例</strong></span></a></h3><h4 id="示例1-视频数据编码" tabindex="-1"><a class="header-anchor" href="#示例1-视频数据编码"><span><strong>示例1：视频数据编码</strong></span></a></h4><p>假设输入像素数据为<code>8&#39;b10101010</code>：</p><ol><li><strong>计算跳变次数</strong>： <ul><li>数据<code>10101010</code>的相邻位跳变为7次（1→0→1→0→1→0→1→0）。</li></ul></li><li><strong>选择XOR或XNOR</strong>： <ul><li>0的数量=4，最低位为0 → 使用XNOR。</li></ul></li><li><strong>生成中间符号</strong>：</li></ol><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = D[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] XNOR D[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> XNOR </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 表示使用XNOR</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>直流平衡调整</strong>：假设当前偏差为+2，反转符号并设置第10位为1。</li></ol><h4 id="示例2-控制字符编码" tabindex="-1"><a class="header-anchor" href="#示例2-控制字符编码"><span><strong>示例2：控制字符编码</strong></span></a></h4><p>发送HSYNC=1和VSYNC=0：</p><ul><li>直接映射到预定义控制字符<code>0b1101010100</code>。</li></ul><hr><h3 id="tmds编码的硬件实现" tabindex="-1"><a class="header-anchor" href="#tmds编码的硬件实现"><span><strong>TMDS编码的硬件实现</strong></span></a></h3><h4 id="fpga逻辑设计" tabindex="-1"><a class="header-anchor" href="#fpga逻辑设计"><span><strong>FPGA逻辑设计</strong></span></a></h4><ul><li><strong>核心模块</strong>：查表法（LUT）或状态机实现编码逻辑。</li><li><strong>流水线优化</strong>：将XOR/XNOR选择、偏差计算和符号生成分为多级流水线。</li></ul><h4 id="verilog代码片段" tabindex="-1"><a class="header-anchor" href="#verilog代码片段"><span><strong>Verilog代码片段</strong></span></a></h4><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> tmds_encoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] ctrl,  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 控制信号（HSYNC, VSYNC）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] tmds</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 计算跳变次数和0的数量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] zeros = count_zeros(data);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    wire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> use_xnor = (zeros &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) || (zeros == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; data[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 生成中间符号q_m</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] q_m;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @(*) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (use_xnor) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = data[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] ~^ data[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // ... 依次生成q_m[2]到q_m[7]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 表示XNOR</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 类似逻辑使用XOR</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 直流平衡调整</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] bias = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    always</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">posedge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ctrl != </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 控制模式：直接输出预定义字符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            tmds &lt;= {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2&#39;b00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ctrl, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6&#39;b010100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 示例控制字符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 视频模式：计算是否反转</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bias == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || (q_m[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5&#39;b10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                tmds &lt;= {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ~q_m};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                bias &lt;= bias - (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*$countones(q_m));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> begin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                tmds &lt;= {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1&#39;b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, q_m};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                bias &lt;= bias + (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*$countones(q_m) - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="tmds的物理层传输" tabindex="-1"><a class="header-anchor" href="#tmds的物理层传输"><span><strong>TMDS的物理层传输</strong></span></a></h3><ul><li><strong>差分信号</strong>：每个TMDS通道（Data0/1/2和Clock）通过一对差分线传输，抗干扰能力强。</li><li><strong>时钟通道</strong>：传输像素时钟的10倍频（例如1080p@60Hz需要148.5MHz像素时钟，时钟通道为1.485GHz）。</li></ul><hr><h3 id="设计挑战与优化" tabindex="-1"><a class="header-anchor" href="#设计挑战与优化"><span><strong>设计挑战与优化</strong></span></a></h3><ol><li><strong>时序收敛</strong>： <ul><li>需在FPGA中约束高速串行时钟（如1.485GHz），确保建立/保持时间满足。</li></ul></li><li><strong>资源占用</strong>： <ul><li>使用FPGA专用串行化器（如Xilinx的OSERDESE2）降低逻辑复杂度。</li></ul></li><li><strong>信号完整性</strong>： <ul><li>PCB设计需保证差分对等长（长度差&lt;5mil），避免阻抗失配。</li></ul></li></ol><hr><p>TMDS编码通过8b/10b转换、最小化跳变和直流平衡机制，实现了高可靠性的数字视频传输。在FPGA设计中，需结合查表法、状态机和流水线优化，同时严格管理时序和信号完整性。理解TMDS编码细节是开发HDMI接口的关键基础。</p><h4 id="逻辑设计" tabindex="-1"><a class="header-anchor" href="#逻辑设计"><span>** 逻辑设计**</span></a></h4><h5 id="核心模块划分" tabindex="-1"><a class="header-anchor" href="#核心模块划分"><span><strong>核心模块划分</strong></span></a></h5><ol><li><p><strong>视频数据处理模块</strong>：</p><ul><li>接收外部输入的视频数据（如摄像头或内存中的RGB/YUV数据）。</li><li>进行分辨率适配（缩放或裁剪）、色彩空间转换（如RGB转YCbCr 4:4:4）和时序生成（同步信号HSYNC/VSYNC）。</li></ul></li><li><p><strong>TMDS编码模块</strong>：</p><ul><li>对视频数据进行<strong>8b/10b编码</strong>，增加直流平衡和时钟恢复能力。</li><li>编码公式：每个8位像素值通过查表或逻辑运算转换为10位TMDS符号。</li><li>控制信号（如DE（Data Enable））需与像素时钟严格同步。</li></ul></li><li><p><strong>并串转换（Serializer）</strong>：</p><ul><li>使用FPGA的专用串行化资源（如Xilinx的OSERDES或Intel的LVDS SERDES），将并行数据转换为高速串行TMDS信号。</li><li>时钟要求：串行化时钟频率 = 像素时钟 × 10（例如1080p@60Hz的像素时钟为148.5MHz，串行时钟需1.485GHz）。</li></ul></li><li><p><strong>音频与辅助数据传输</strong>：</p><ul><li>音频数据需打包为I2S格式，并通过数据岛周期插入视频消隐区。</li><li>实现EDID（Extended Display Identification Data）读写，用于显示器参数识别。</li></ul></li><li><p><strong>时钟管理</strong>：</p><ul><li>使用FPGA的PLL或MMCM生成精确的像素时钟和串行化时钟。</li><li>需解决跨时钟域问题（如视频数据与音频数据的时钟同步）。</li></ul></li></ol><h5 id="代码结构示例-vhdl-verilog" tabindex="-1"><a class="header-anchor" href="#代码结构示例-vhdl-verilog"><span><strong>代码结构示例（VHDL/Verilog）</strong></span></a></h5><div class="language-verilog line-numbers-mode" data-highlighter="shiki" data-ext="verilog" data-title="verilog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// TMDS编码模块示例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> tmds_encoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] data,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ctrl,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] tmds</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 8b/10b编码逻辑（查表或算法实现）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 顶层HDMI控制器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> hmi_controller</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> clk_pixel,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">23</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] rgb,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tmds_clk,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] tmds_data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实例化编码器、时钟管理、并串转换等模块</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endmodule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="验证与调试" tabindex="-1"><a class="header-anchor" href="#验证与调试"><span>** 验证与调试**</span></a></h3><ul><li><strong>仿真验证</strong>： <ul><li>使用ModelSim或Vivado Simulator验证TMDS编码和时序逻辑。</li><li>生成测试向量（如渐变彩条图案）模拟视频输入。</li></ul></li><li><strong>硬件测试</strong>： <ul><li>通过示波器或逻辑分析仪捕获TMDS信号眼图，验证信号完整性。</li><li>使用HDMI协议分析仪（如Teledyne LeCroy的PeHDMI）解析数据包内容。</li></ul></li></ul><hr><h3 id="挑战与优化" tabindex="-1"><a class="header-anchor" href="#挑战与优化"><span>** 挑战与优化**</span></a></h3><ol><li><strong>时序约束</strong>： <ul><li>需在FPGA中设置严格的时序约束（如set_input_delay/set_output_delay），确保数据与时钟对齐。</li></ul></li><li><strong>信号完整性</strong>： <ul><li>差分走线等长控制（长度差&lt;5mil），避免反射和串扰。</li></ul></li><li><strong>资源优化</strong>： <ul><li>使用FPGA专用硬核（如Xilinx的GTP/GTX收发器）降低逻辑资源占用。</li><li>通过流水线设计提高吞吐量。</li></ul></li></ol><hr><h3 id="_5-应用场景" tabindex="-1"><a class="header-anchor" href="#_5-应用场景"><span><strong>5. 应用场景</strong></span></a></h3><ul><li><strong>视频处理设备</strong>：如视频采集卡、图像发生器。</li><li><strong>嵌入式显示系统</strong>：工业HMI、医疗显示终端。</li><li><strong>消费电子原型开发</strong>：游戏机、VR设备的前期验证。</li></ul><hr><p>基于FPGA的HDMI接口设计需要综合硬件电路设计、高速信号处理和严格的时序控制，核心在于TMDS编码、并串转换和时钟管理。通过模块化设计和仿真验证，可高效实现高清视频传输，适用于定制化视频系统开发。</p>`,81))])}const u=l(c,[["render",y],["__file","chapter4.html.vue"]]),b=JSON.parse('{"path":"/book/chapter4.html","title":"第4讲：FPGA数字接口设计","lang":"zh-cn","frontmatter":{"title":"第4讲：FPGA数字接口设计","author":["周贤中"],"date":"2025-03-30T00:00:00.000Z","subject":"Markdown","keywords":["FPGA","系统设计"],"lang":"zh-cn"},"headers":[{"level":2,"title":"通用异步收发器","slug":"通用异步收发器","link":"#通用异步收发器","children":[{"level":3,"title":"UART工作原理","slug":"uart工作原理","link":"#uart工作原理","children":[]},{"level":3,"title":"发送器模块的verilog实现","slug":"发送器模块的verilog实现","link":"#发送器模块的verilog实现","children":[]},{"level":3,"title":"接收器模块的verilog实现","slug":"接收器模块的verilog实现","link":"#接收器模块的verilog实现","children":[]},{"level":3,"title":"关键参数与信号","slug":"关键参数与信号","link":"#关键参数与信号","children":[]},{"level":3,"title":"联合发送器模块与接收器模块的仿真结果","slug":"联合发送器模块与接收器模块的仿真结果","link":"#联合发送器模块与接收器模块的仿真结果","children":[]},{"level":3,"title":"SPI工作原理","slug":"spi工作原理","link":"#spi工作原理","children":[]},{"level":3,"title":"Verilog实现方案","slug":"verilog实现方案","link":"#verilog实现方案","children":[]},{"level":3,"title":"数据格式*I²C 协议核心特征：","slug":"数据格式-i2c-协议核心特征","link":"#数据格式-i2c-协议核心特征","children":[]},{"level":3,"title":"连接原理","slug":"连接原理","link":"#连接原理","children":[]}]},{"level":2,"title":"LVDS技术详解及其在FPGA中的应用","slug":"lvds技术详解及其在fpga中的应用","link":"#lvds技术详解及其在fpga中的应用","children":[{"level":3,"title":"LVDS技术概述","slug":"lvds技术概述","link":"#lvds技术概述","children":[]},{"level":3,"title":"LVDS工作原理详细说明","slug":"lvds工作原理详细说明","link":"#lvds工作原理详细说明","children":[]},{"level":3,"title":"LVDS技术特点详细说明","slug":"lvds技术特点详细说明","link":"#lvds技术特点详细说明","children":[]},{"level":3,"title":"FPGA中的LVDS支持","slug":"fpga中的lvds支持","link":"#fpga中的lvds支持","children":[]},{"level":3,"title":"LVDS在FPGA中的典型应用","slug":"lvds在fpga中的典型应用","link":"#lvds在fpga中的典型应用","children":[]}]},{"level":2,"title":"FPGA实现HDMI接口的设计流程","slug":"fpga实现hdmi接口的设计流程","link":"#fpga实现hdmi接口的设计流程","children":[{"level":3,"title":"硬件设计","slug":"硬件设计","link":"#硬件设计","children":[]},{"level":3,"title":"1. HDMI接口基本原理","slug":"_1-hdmi接口基本原理","link":"#_1-hdmi接口基本原理","children":[]},{"level":3,"title":"TMDS编码的核心原理","slug":"tmds编码的核心原理","link":"#tmds编码的核心原理","children":[]},{"level":3,"title":"8b/10b编码的详细步骤","slug":"_8b-10b编码的详细步骤","link":"#_8b-10b编码的详细步骤","children":[]},{"level":3,"title":"TMDS编码示例","slug":"tmds编码示例","link":"#tmds编码示例","children":[]},{"level":3,"title":"TMDS编码的硬件实现","slug":"tmds编码的硬件实现","link":"#tmds编码的硬件实现","children":[]},{"level":3,"title":"TMDS的物理层传输","slug":"tmds的物理层传输","link":"#tmds的物理层传输","children":[]},{"level":3,"title":"设计挑战与优化","slug":"设计挑战与优化","link":"#设计挑战与优化","children":[]},{"level":3,"title":"** 验证与调试**","slug":"验证与调试","link":"#验证与调试","children":[]},{"level":3,"title":"** 挑战与优化**","slug":"挑战与优化","link":"#挑战与优化","children":[]},{"level":3,"title":"5. 应用场景","slug":"_5-应用场景","link":"#_5-应用场景","children":[]}]}],"git":{"createdTime":1738908357000,"updatedTime":1749345260000,"contributors":[{"name":"Xianzhong Zhou","username":"Xianzhong Zhou","email":"zhouxzh@gdut.edu.cn","commits":6,"url":"https://github.com/Xianzhong Zhou"}]},"readingTime":{"minutes":42.79,"words":12837},"filePathRelative":"book/chapter4.md","localizedDate":"2025年3月30日"}');export{u as comp,b as data};
