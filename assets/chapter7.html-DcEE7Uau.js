import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as t}from"./app-K29S6iA3.js";const n={};function e(h,i){return t(),a("div",null,i[0]||(i[0]=[l(`<h1 id="实验7-ps端emio操作与pl端外设控制" tabindex="-1"><a class="header-anchor" href="#实验7-ps端emio操作与pl端外设控制"><span>实验7：PS端EMIO操作与PL端外设控制</span></a></h1><hr><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span><strong>概述</strong></span></a></h4><ul><li><strong>实验目的</strong>：通过EMIO实现PS控制PL端LED灯及按键中断，掌握EMIO与PL引脚交互的方法。</li><li><strong>实验工程</strong>：Vivado工程名为“ps_emio”，基于“ps_hello”工程修改。</li><li><strong>核心概念</strong>： <ul><li><strong>EMIO</strong>：PS端通过BANK2/BANK3扩展的64个引脚，用于连接PL端外设，编号从54开始（MIO占用0-53）。</li><li><strong>与MIO区别</strong>：EMIO需通过PL端引脚映射，需生成FPGA比特流文件（即使逻辑简单）。</li></ul></li></ul><hr><h4 id="emio硬件配置-fpga工程师任务" tabindex="-1"><a class="header-anchor" href="#emio硬件配置-fpga工程师任务"><span><strong>EMIO硬件配置（FPGA工程师任务）</strong></span></a></h4><ol><li><p><strong>Vivado工程配置</strong>：</p><ul><li>复制“ps_hello”工程为“ps_emio”，打开ZYNQ核配置。</li><li>勾选 <strong>GPIO EMIO</strong>，设置EMIO位宽为8（对应4个LED + 1个按键）。</li><li>导出EMIO信号：右键<code>GPIO_0</code>端口，选择 <strong>Make External</strong>。</li></ul></li><li><p><strong>PL引脚约束</strong>：</p><ul><li>在XDC文件中绑定EMIO信号至PL端物理引脚（需参考开发板原理图）：<div class="language-tcl line-numbers-mode" data-highlighter="shiki" data-ext="tcl" data-title="tcl" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">set_property PACKAGE_PIN &lt;引脚编号&gt; [get_ports {GPIO_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">_tri_io[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]}]  # LED0  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">set_property PACKAGE_PIN &lt;引脚编号&gt; [get_ports {GPIO_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">_tri_io[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]}]  # 按键</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><hr><h4 id="sdk软件开发-软件工程师任务" tabindex="-1"><a class="header-anchor" href="#sdk软件开发-软件工程师任务"><span><strong>SDK软件开发（软件工程师任务）</strong></span></a></h4><h5 id="_9-4-1-emio点亮pl端led灯" tabindex="-1"><a class="header-anchor" href="#_9-4-1-emio点亮pl端led灯"><span><strong>9.4.1 EMIO点亮PL端LED灯</strong></span></a></h5><ol><li><p><strong>工程创建</strong>：</p><ul><li>新建SDK工程“emio_led_test”，模板选择“Hello World”。</li></ul></li><li><p><strong>代码修改</strong>：</p><ul><li>修改LED引脚编号为EMIO起始值（54~61，对应GPIO_0的8位信号）：<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LED_PIN</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 54</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // PL端LED0对应EMIO54  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XGpio_DiscreteWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Gpio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> LED_PIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 点亮LED</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h5 id="_9-4-2-emio实现pl端按键中断" tabindex="-1"><a class="header-anchor" href="#_9-4-2-emio实现pl端按键中断"><span><strong>9.4.2 EMIO实现PL端按键中断</strong></span></a></h5><ol><li><p><strong>工程创建</strong>：</p><ul><li>新建工程“emio_key_test”，移植MIO按键中断代码。</li></ul></li><li><p><strong>关键修改</strong>：</p><ul><li>按键和LED引脚编号调整（例如按键EMIO58，LED EMIO54）：<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> KEY_PIN</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 58</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // PL按键对应EMIO58  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LED_PIN</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 54</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // PL LED对应EMIO54</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>中断配置：<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置按键为上升沿触发  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XGpio_InterruptEnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Gpio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> KEY_PIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XGpio_InterruptGlobalEnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Gpio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>中断服务程序</strong>：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GpioHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XGpio_InterruptGetStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Gpio)) {  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        XGpio_InterruptClear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Gpio, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> KEY_PIN);  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        XGpio_DiscreteWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Gpio, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, LED_PIN, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">~</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LED_STATE);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 翻转LED状态  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h4 id="固化程序生成" tabindex="-1"><a class="header-anchor" href="#固化程序生成"><span><strong>固化程序生成</strong></span></a></h4><ol><li><p><strong>生成启动镜像</strong>：</p><ul><li>创建FSBL工程（勾选调试信息）。</li><li>右键APP工程，选择 <strong>Create Boot Image</strong>，包含： <ul><li>FSBL.elf</li><li>design_1_wrapper.bit（PL配置比特流）</li><li>emio_led_test.elf（应用程序）</li></ul></li></ul></li><li><p><strong>烧录至SD卡</strong>：</p><ul><li>将生成的<code>BOOT.bin</code>文件拷贝至SD卡FAT32分区，开发板启动模式设为SD卡。</li></ul></li></ol><hr><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span><strong>注意事项</strong></span></a></h4><ol><li><p><strong>EMIO与PL引脚映射</strong>：</p><ul><li>EMIO信号需通过XDC文件绑定至PL物理引脚，否则无法生效。</li><li>即使无复杂PL逻辑，仍需生成比特流文件以配置引脚连接。</li></ul></li><li><p><strong>中断优先级配置</strong>：</p><ul><li>操作<code>ICDIPR</code>（优先级）和<code>ICDICFR</code>（触发方式）寄存器，确保中断控制器正确响应。</li></ul></li><li><p><strong>代码兼容性</strong>：</p><ul><li>不同开发板的EMIO引脚编号可能不同，需根据原理图调整代码中的宏定义。</li></ul></li></ol><hr><h4 id="实验总结" tabindex="-1"><a class="header-anchor" href="#实验总结"><span><strong>实验总结</strong></span></a></h4><p>通过本实验可掌握：</p><ul><li><strong>EMIO配置流程</strong>：从Vivado硬件配置到PL引脚约束。</li><li><strong>PS-PL交互方法</strong>：通过EMIO控制PL外设，实现GPIO输出与中断输入。</li><li><strong>固化程序生成</strong>：集成FSBL、比特流与应用程序，完成系统级部署。</li></ul><p>EMIO为PS与PL协同设计的基础，后续可扩展至复杂外设（如自定义IP核）控制。</p>`,24)]))}const p=s(n,[["render",e],["__file","chapter7.html.vue"]]),d=JSON.parse('{"path":"/experiment/chapter7.html","title":"实验7：PS端EMIO操作与PL端外设控制","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1743470207000,"updatedTime":1749345260000,"contributors":[{"name":"Xianzhong Zhou","username":"Xianzhong Zhou","email":"zhouxzh@gdut.edu.cn","commits":2,"url":"https://github.com/Xianzhong Zhou"}]},"readingTime":{"minutes":2.58,"words":773},"filePathRelative":"experiment/chapter7.md","localizedDate":"2025年4月1日"}');export{p as comp,d as data};
